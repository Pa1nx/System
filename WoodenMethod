local Player = game.Players.LocalPlayer
local function GameCheck()
if game.PlaceId == 8737899170 then
    while true do
        game.ReplicatedStorage.Network.World3Teleport:InvokeServer()
        wait(5)
    end
end
end
spawn(GameCheck)

local TreeNames = {"Oak", "Birch", "Elm", "Fantasy", "Evergreen", "Willow"}
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES") and Player.PlayerGui._MACHINES.NPCQuests.Frame.ItemsFrame:GetChildren()
local TargetTrees = {}
ReplicatedStorage = game:GetService("ReplicatedStorage")
local humanoidRootPart = Player.Character and Player.Character:WaitForChild("HumanoidRootPart")
local checking = false

local enterTeleport
local humanoidRootPart = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

local ReplicatedStorage = game:GetService("ReplicatedStorage")


function OrbCollect()
    while true do 
        local Orbs = workspace:FindFirstChild("__THINGS")
        if Orbs then
            for _, orb in ipairs(Orbs.Orbs:GetChildren()) do
                local ohTable1 = { tonumber(orb.Name) }
                ReplicatedStorage.Network["Orbs: Collect"]:FireServer(ohTable1)
                orb:Destroy()
            end 
        end
        task.wait()
    end
end


function LootbagCollect()
    while true do 
        local Lootbags = workspace:FindFirstChild("__THINGS") and workspace.__THINGS:FindFirstChild("Lootbags")
        if Lootbags then
            for _, bag in ipairs(Lootbags:GetChildren()) do
                local ohTable1 = { tostring(bag) }
                ReplicatedStorage.Network.Lootbags_Claim:FireServer(ohTable1)
                bag:Destroy()
            end 
        end
        task.wait()
    end
end

spawn(OrbCollect)
spawn(LootbagCollect)

local function SeedBag()
    while true do
          local args = {
                [1] = "Mini Chest"
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("GiftBag_Open"):InvokeServer(unpack(args))
        
            local args = {
                [1] = "Large Gift Bag"
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("GiftBag_Open"):InvokeServer(unpack(args))
            local args = {
                [1] = "Mini Gift Bag"
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("GiftBag_Open"):InvokeServer(unpack(args))
        wait(0.1)
    end
end



    spawn(SeedBag)



local function CollectGift()
while true do
wait(1)
local args = {
    [1] = "WoodcuttingQuests"
}

game:GetService("ReplicatedStorage").Network:FindFirstChild("NPC Quests: Redeem"):InvokeServer(unpack(args))
end
end
spawn(CollectGift)

if workspace:FindFirstChild("__THINGS") then
    local instances = workspace.__THINGS:FindFirstChild("Instances")
    if instances then
        local woodcutting = instances:FindFirstChild("Woodcutting")
        if woodcutting then
            local teleports = woodcutting:FindFirstChild("Teleports")
            if teleports then
                enterTeleport = teleports:FindFirstChild("Enter")
            end
        end
    end
end


if enterTeleport and humanoidRootPart then
    repeat
        local args = { "Nebula Forest" }
        game:GetService("ReplicatedStorage").Network.Teleports_RequestTeleport:InvokeServer(unpack(args))
        wait(10)
    until (humanoidRootPart.Position - enterTeleport.Position).Magnitude <= 200

    humanoidRootPart.CFrame = enterTeleport.CFrame
else
    warn("Could not locate enterTeleport or humanoidRootPart")
end


local function CheckLoop()
    while true do
        wait(0.01)
        checking = true
        wait(90)
    end
end
spawn(CheckLoop)

local function LeaveArea()
    while true do
        wait(0.01)
        if checking == true then
            if workspace:FindFirstChild("__THINGS") then
                local instances = workspace.__THINGS:FindFirstChild("Instances")
                if instances then
                    local woodcutting = instances:FindFirstChild("Woodcutting")
                    if woodcutting then
                        local teleports = woodcutting:FindFirstChild("Teleports")
                        if teleports then
                            local leaveTeleport = teleports:FindFirstChild("Leave")
                            if leaveTeleport and humanoidRootPart then
                                if (humanoidRootPart.Position - leaveTeleport.Position).Magnitude <= 1000 then
                                    humanoidRootPart.CFrame = CFrame.new(leaveTeleport.Position)
                                end
                                
                                wait(5)
                                
                                local enterTeleport = teleports:FindFirstChild("Enter")
                                if enterTeleport then
                                    if (humanoidRootPart.Position - enterTeleport.Position).Magnitude <= 20 then
                                        humanoidRootPart.CFrame = CFrame.new(enterTeleport.Position)
                                    end
                                end
                                
                                wait(8)

                                local npcQuests = Player.PlayerGui:FindFirstChild("_MACHINES") 
                                    and Player.PlayerGui._MACHINES:FindFirstChild("NPCQuests")
                                
                                local targetPosition = Vector3.new(6425.730, 463.9, -22290)

                                repeat
                                    wait(0.01)
                                    if humanoidRootPart then
                                        if (humanoidRootPart.Position - targetPosition).Magnitude <= 800 then
                                            local randomOffset = Vector3.new(
                                                math.random(-2, 2),
                                                0,
                                                math.random(-2, 2)
                                            )
                                            humanoidRootPart.CFrame = CFrame.new(targetPosition + randomOffset)
                                            wait(0.1)
                                            humanoidRootPart.CFrame = CFrame.new(targetPosition + randomOffset)
                                        end
                                    end
                                    wait(1)
                                until npcQuests and npcQuests.Enabled
                                
                                checking = false
                            end
                        end
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(LeaveArea)

local Oak, Birch, Elm, Evergreen, Fantasy, Willow = false, false, false, false, false, false

local function TreeTracker()
    while true do
        wait(0.01)
        
        -- Reset tracking tables for each tree type
        local treeStatus = {
            Oak = false,
            Birch = false,
            Elm = false,
            Evergreen = false,
            Fantasy = false,
            Willow = false
        }

        if itemsFrame then
            for _, child in ipairs(itemsFrame) do
                if child.Name == "Quest1" or child.Name == "Quest2" or child.Name == "Quest3" then
                    local descText = child.Desc.Text
                    local current, total = descText:match("(%d+)/(%d+)")
                    current, total = tonumber(current), tonumber(total)

                    local titleText = child.Title.Text
                    for _, tree in ipairs(TreeNames) do
                        if titleText:find(tree) then
                            if current < total then
                                -- Set tree type to true if any quest is incomplete
                                treeStatus[tree] = true
                            end
                        end
                    end
                end
            end
        end

        -- Update each tree's status based on tracking table
        Oak, Birch, Elm, Evergreen, Fantasy, Willow = 
            treeStatus.Oak, treeStatus.Birch, treeStatus.Elm, 
            treeStatus.Evergreen, treeStatus.Fantasy, treeStatus.Willow

        wait(1)
    end
end

spawn(TreeTracker)

local function DeletionTree()
    while true do
        if workspace:FindFirstChild("__THINGS") then
            local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
            if instanceContainer and instanceContainer:FindFirstChild("Active") then
                local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                if woodcutting and woodcutting:FindFirstChild("Important") then
                    local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                    for _, model in ipairs(treesContainer:GetChildren()) do
                        if model:IsA("Model") then
                            local modelName = model.Name
                            local number = tonumber(modelName) -- Try to convert the name to a number
                            if number then
                                if number < 10 then
                                    model.Name = tostring(number + 1) -- Increment the number by 1
                                elseif number >= 10 then
                                    model:Destroy() -- Destroy the model if the number is greater or equal to 15
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(1)
    end
end
spawn(DeletionTree)

local function ChangeNameToNumber()
    while true do
        if workspace:FindFirstChild("__THINGS") then
            local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
            if instanceContainer and instanceContainer:FindFirstChild("Active") then
                local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                if woodcutting and woodcutting:FindFirstChild("Important") then
                    local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                    for _, model in ipairs(treesContainer:GetChildren()) do
                        if model:IsA("Model") then
                            if model.Name == "StartTimer" then
                                model.Name = "1" 
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end
spawn(ChangeNameToNumber)



local found = false
local function TreesFunction()
    while true do
        wait(0.00000001)
        if checking == false then
            found = false

            if workspace:FindFirstChild("__THINGS") then
                local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
                if instanceContainer and instanceContainer:FindFirstChild("Active") then
                    local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                    if woodcutting and woodcutting:FindFirstChild("Important") then
                        local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                        
                        for _, model in ipairs(treesContainer:GetChildren()) do
                            if model:IsA("Model") then
                                local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                
                                if (Oak == true and TargetBrickColor == BrickColor.new("Tr. Flu. Yellow"))
                                or (Birch == true and TargetBrickColor == BrickColor.new("Black"))
                                or (Elm == true and TargetBrickColor == BrickColor.new("Sea green"))
                                or (Evergreen == true and TargetBrickColor == BrickColor.new("Camo"))
                                or (Fantasy == true and TargetBrickColor == BrickColor.new("Dark indigo"))
                                or (Willow == true and TargetBrickColor == BrickColor.new("Deep orange")) then
                                    found = true
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame
                                    local AttributeValue = model.Trunk:GetAttribute("UID")
                                    if AttributeValue then
                                        local args = { "Woodcutting", "ChopTree", AttributeValue }
                                        ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                    end
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end

                                end
                            end
                        end
                    end
                end
            end
            
            
            wait()
        end
    end
end

spawn(TreesFunction)


local function TreeBackUp()
    while true do
        wait(0.00000001)
        if checking == false then
            if found == false then
                if workspace:FindFirstChild("__THINGS") then
                    local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
                    if instanceContainer and instanceContainer:FindFirstChild("Active") then
                        local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                        if woodcutting and woodcutting:FindFirstChild("Important") then
                            local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                            local closestTree
                            local closestDistance = math.huge
                            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                            local TreeTargetFound = false

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Tr. Flu. Yellow") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame + Vector3.new(3, 0, 0)
                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end
                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Black") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame + Vector3.new(3, 0, 0)
                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end
                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Sea green") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame + Vector3.new(3, 0, 0)
                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end
                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Camo") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame + Vector3.new(3, 0, 0)
                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end
                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Dark indigo") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame + Vector3.new(3, 0, 0)
                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end
                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Deep orange") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = model.Trunk.CFrame + Vector3.new(3, 0, 0)
                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end
                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end

                                        end
                                        break
                                    end
                                end
                            end

                        end
                    end
                end
            end
        end
        wait()
    end
end

spawn(TreeBackUp)













local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ItemLootbox = {"Wooden Gift"}
local woodengiftamount = 0
local woodengiftuid = "hi"

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

    if Inventory[ItemsClass] then
        for UID, Item in pairs(Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                local ItemInfo = {
                    uid = UID,
                    data = Item
                }
                table.insert(Table, ItemInfo)
            end
        end
    end
    return Table
end

local function PrintWoodenGiftAmount()
    while true do
        local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
        for _, ItemInfo in pairs(LootboxItems) do
            local ItemData = ItemInfo.data
            if ItemData and ItemData._am then
              woodengiftamount = ItemData._am 
woodengiftuid = ItemInfo.uid
            end
        end
        wait(1)
    end
end

spawn(PrintWoodenGiftAmount)

local function WebsiteDataUpdate()
while true do
local Player = game.Players.LocalPlayer
local player = Player.Name
        local Http = game:GetService("HttpService")

        local request = (syn and syn.request) or request or (http and http.request) or http_request

        -- Updated URL
        local response = request({
            Url = 'https://67f552e4-5e03-4d76-bc81-e7c398e4e63f-00-1db81sgqdm8hk.riker.replit.dev/update',
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player,
                VoidTicketsValue = woodengiftamount,
                DiamondsValue = "0",
                HugeList = "0"
            })
        })
wait(15)
end
end
spawn(WebsiteDataUpdate)
wait(180)
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local last

local File = pcall(function()
   AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
   table.insert(AllIDs, actualHour)
   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
   local Site;
   if foundAnything == "" then
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
   else
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
   end
   local ID = ""
   if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
       foundAnything = Site.nextPageCursor
   end
   local num = 0;
   local extranum = 0
   for i,v in pairs(Site.data) do
       extranum += 1
       local Possible = true
       ID = tostring(v.id)
       if tonumber(v.maxPlayers) > tonumber(v.playing) then
           if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
               last = tonumber(v.playing)
           elseif extranum ~= 1 then
               continue
           end
           for _,Existing in pairs(AllIDs) do
               if num ~= 0 then
                   if ID == tostring(Existing) then
                       Possible = false
                   end
               else
                   if tonumber(actualHour) ~= tonumber(Existing) then
                       local delFile = pcall(function()
                           delfile("NotSameServers.json")
                           AllIDs = {}
                           table.insert(AllIDs, actualHour)
                       end)
                   end
               end
               num = num + 1
           end
           if Possible == true then
               table.insert(AllIDs, ID)
               wait()
               pcall(function()
                   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                   wait()
                   game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
               end)
               wait(4)
           end
       end
   end
end

function Teleport()
   while wait() do
       pcall(function()
           TPReturner()
           if foundAnything ~= "" then
               TPReturner()
           end
       end)
   end
end
while true do
spawn(Teleport)
wait(10)
end
