local function ZapHibScript()
script_key="amuxkfDBfyvxleWxMyzyPqskazjCnXon";
loadstring(game:HttpGet('https://zaphub.xyz/Exec'))()
end
spawn(ZapHibScript)



wait(10)

local TreeNames = {"Oak", "Birch", "Elm", "Fantasy", "Evergreen", "Willow"}
local Player = game.Players.LocalPlayer
local humanoidRootPart = Player.Character and Player.Character:WaitForChild("HumanoidRootPart")

local TreeNames = {"Oak", "Birch", "Elm", "Fantasy", "Evergreen", "Willow"}
local Player = game.Players.LocalPlayer
local humanoidRootPart = Player.Character and Player.Character:WaitForChild("HumanoidRootPart")

local function Menu()
    local targetPosition = Vector3.new(6425.730, 463.9, -22290)
    local npcQuests = Player.PlayerGui:FindFirstChild("_MACHINES") and Player.PlayerGui._MACHINES:FindFirstChild("NPCQuests")

    while true do
        repeat
            if humanoidRootPart then
                if (humanoidRootPart.Position - targetPosition).Magnitude <= 500 then
                    humanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end
            wait(1)
        until npcQuests and npcQuests.Enabled

        wait(10)
        if npcQuests then
            npcQuests.Enabled = false
        end
        wait(10)
    end
end
spawn(Menu)

local function LeaveArea() 
    while true do
        wait(180)
        if workspace:FindFirstChild("__THINGS") then
            local instances = workspace.__THINGS:FindFirstChild("Instances")
            if instances then
                local woodcutting = instances:FindFirstChild("Woodcutting")
                if woodcutting then
                    local teleports = woodcutting:FindFirstChild("Teleports")
                    if teleports then
                        local leaveTeleport = teleports:FindFirstChild("Leave")
                        if leaveTeleport and humanoidRootPart then
                            if (humanoidRootPart.Position - leaveTeleport.Position).Magnitude <= 500 then
                                humanoidRootPart.CFrame = CFrame.new(leaveTeleport.Position)
                            end
                        end
                    end
                end
            end
        end
    end
end
spawn(LeaveArea)


local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES") and Player.PlayerGui._MACHINES.NPCQuests.Frame.ItemsFrame:GetChildren()
local TargetTrees = {}

wait(5)
local treeColors = {
    Oak = BrickColor.new("Tr. Flu. Yellow"),
    Birch = BrickColor.new("Black"),
    Elm = BrickColor.new("Sea Green"),
    Evergreen = BrickColor.new("Camo"),
    Fantasy = BrickColor.new("Dark indigo"),
    Willow = BrickColor.new("Deep orange")
}

local function TreeTracker()
    while true do
        TargetTrees = {}
        if itemsFrame then
            for _, child in ipairs(itemsFrame) do
                if child.Name == "Quest1" or child.Name == "Quest2" or child.Name == "Quest3" then
                    local descText = child.Desc.Text
                    local current, total = descText:match("(%d+)/(%d+)")
                    current, total = tonumber(current), tonumber(total)

                    if current >= total then
                        print("Quest " .. string.sub(child.Name, -1) .. " is completed")
                    else
                        local titleText = child.Title.Text
                        for _, tree in ipairs(TreeNames) do
                            if titleText:find(tree) then
                                if not table.find(TargetTrees, tree) then
                                    table.insert(TargetTrees, tree)
                                    print(child.Name .. " | (" .. tree .. " in the quest) is not finished, only " .. current .. " has been cut out of " .. total)
                                end
                            end
                        end
                    end
                end
            end
        end
        wait()
    end
end
spawn(TreeTracker)

local function DeleteTrees()
    local playerName = game.Players.LocalPlayer.Name
    
    while true do
        if workspace:FindFirstChild("__THINGS") then
            local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
            if instanceContainer and instanceContainer:FindFirstChild("Active") then
                local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                if woodcutting and woodcutting:FindFirstChild("Important") then
                    local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                    if treesContainer then
                        local trees = treesContainer:GetChildren()
                        local treeCount = 0

                        for _, model in pairs(trees) do
                            if model:IsA("Model") then
                                local leaves = model:FindFirstChild("Leaves1")
                                if leaves then
                                    local keepTree = false
                                    
                                    for _, targetTree in ipairs(TargetTrees) do
                                        if leaves.BrickColor == treeColors[targetTree] then
                                            keepTree = true
                                            break
                                        end
                                    end

                                    if playerName == "svipbatch1" then
                                        if keepTree then
                                            treeCount = treeCount + 1
                                            if treeCount > 20 then
                                                model:Destroy()
                                            end
                                        else
                                            model:Destroy()
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(2)
    end
end

spawn(DeleteTrees)


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ItemLootbox = {"Wooden Gift"}
local woodengiftamount = 0
local woodengiftuid = "hi"

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

    if Inventory[ItemsClass] then
        for UID, Item in pairs(Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                local ItemInfo = {
                    uid = UID,
                    data = Item
                }
                table.insert(Table, ItemInfo)
            end
        end
    end
    return Table
end

local function PrintWoodenGiftAmount()
    while true do
        local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
        for _, ItemInfo in pairs(LootboxItems) do
            local ItemData = ItemInfo.data
            if ItemData and ItemData._am then
              woodengiftamount = ItemData._am 
woodengiftuid = ItemInfo.uid
            end
        end
        wait(1)
    end
end

spawn(PrintWoodenGiftAmount)

local function WebsiteDataUpdate()
while true do
local Player = game.Players.LocalPlayer
local player = Player.Name
        local Http = game:GetService("HttpService")

        local request = (syn and syn.request) or request or (http and http.request) or http_request

        -- Updated URL
        local response = request({
            Url = 'https://67f552e4-5e03-4d76-bc81-e7c398e4e63f-00-1db81sgqdm8hk.riker.replit.dev/update',
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player,
                VoidTicketsValue = woodengiftamount,
                DiamondsValue = "0",
                HugeList = "0"
            })
        })
wait(15)
end
end
spawn(WebsiteDataUpdate)


wait(180)
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local last

local File = pcall(function()
   AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
   table.insert(AllIDs, actualHour)
   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
   local Site;
   if foundAnything == "" then
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
   else
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
   end
   local ID = ""
   if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
       foundAnything = Site.nextPageCursor
   end
   local num = 0;
   local extranum = 0
   for i,v in pairs(Site.data) do
       extranum += 1
       local Possible = true
       ID = tostring(v.id)
       if tonumber(v.maxPlayers) > tonumber(v.playing) then
           if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
               last = tonumber(v.playing)
           elseif extranum ~= 1 then
               continue
           end
           for _,Existing in pairs(AllIDs) do
               if num ~= 0 then
                   if ID == tostring(Existing) then
                       Possible = false
                   end
               else
                   if tonumber(actualHour) ~= tonumber(Existing) then
                       local delFile = pcall(function()
                           delfile("NotSameServers.json")
                           AllIDs = {}
                           table.insert(AllIDs, actualHour)
                       end)
                   end
               end
               num = num + 1
           end
           if Possible == true then
               table.insert(AllIDs, ID)
               wait()
               pcall(function()
                   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                   wait()
                   game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
               end)
               wait(4)
           end
       end
   end
end

function Teleport()
   while wait() do
       pcall(function()
           TPReturner()
           if foundAnything ~= "" then
               TPReturner()
           end
       end)
   end
end

Teleport()
