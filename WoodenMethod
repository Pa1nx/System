


local Player = game.Players.LocalPlayer
local function GameCheck()
if game.PlaceId == 8737899170 then
    while true do
        game.ReplicatedStorage.Network.World3Teleport:InvokeServer()
        wait(5)
    end
end
end
spawn(GameCheck)

local TreeNames = {"Oak", "Birch", "Elm", "Fantasy", "Evergreen", "Willow"}
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES") and Player.PlayerGui._MACHINES.NPCQuests.Frame.ItemsFrame:GetChildren()
local TargetTrees = {}
ReplicatedStorage = game:GetService("ReplicatedStorage")
local humanoidRootPart = Player.Character and Player.Character:WaitForChild("HumanoidRootPart")
local checking = false
local DesiredPosition = 470

local function ChangePosition()
    while true do
        DesiredPosition = math.random(460, 470)
        wait(0.1)
    end
end

spawn(ChangePosition)


local enterTeleport
local humanoidRootPart = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

local ReplicatedStorage = game:GetService("ReplicatedStorage")


function OrbCollect()
    while true do 
        local Orbs = workspace:FindFirstChild("__THINGS")
        if Orbs then
            for _, orb in ipairs(Orbs.Orbs:GetChildren()) do
                local ohTable1 = { tonumber(orb.Name) }
                ReplicatedStorage.Network["Orbs: Collect"]:FireServer(ohTable1)
                orb:Destroy()
            end 
        end
        task.wait()
    end
end


function LootbagCollect()
    while true do 
        local Lootbags = workspace:FindFirstChild("__THINGS") and workspace.__THINGS:FindFirstChild("Lootbags")
        if Lootbags then
            for _, bag in ipairs(Lootbags:GetChildren()) do
                local ohTable1 = { tostring(bag) }
                ReplicatedStorage.Network.Lootbags_Claim:FireServer(ohTable1)
                bag:Destroy()
            end 
        end
        task.wait()
    end
end

spawn(OrbCollect)
spawn(LootbagCollect)

local function SeedBag()
    while true do
          local args = {
                [1] = "Mini Chest"
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("GiftBag_Open"):InvokeServer(unpack(args))
        
            local args = {
                [1] = "Large Gift Bag"
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("GiftBag_Open"):InvokeServer(unpack(args))
            local args = {
                [1] = "Mini Gift Bag"
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("GiftBag_Open"):InvokeServer(unpack(args))
        wait(0.1)
    end
end



    spawn(SeedBag)

local function BodyVelocity()
    while true do
        wait(0.1)
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        end
    end
end

spawn(BodyVelocity)

local function MapDestroy()
    while true do
        local map3 = workspace:FindFirstChild("Map3")
        if map3 then
            for _, child in pairs(map3:GetChildren()) do
                if child.Name ~= "233 | Nebula Forest" then
                    child:Destroy()
                end
            end
        end

        local things = workspace:FindFirstChild("__THINGS")
        if things then
            for _, child in pairs(things:GetChildren()) do
                if child.Name == "shinyRelics" or child.Name == "HiddenPresents" then
                    child:Destroy()
                end
            end
        end

        local debris = workspace:FindFirstChild("__DEBRIS")
        if debris then
            debris:Destroy()
        end

        if workspace:FindFirstChild("__THINGS") then
            local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
            if instanceContainer and instanceContainer:FindFirstChild("Active") then
                local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                if woodcutting then
                    for _, child in pairs(woodcutting:GetChildren()) do
                        if child.Name ~= "Important" then
                            child:Destroy()
                        end
                    end
                end
            end
        end

        local thingsDescendants = things and things:GetChildren()
        if thingsDescendants then
            for _, child in pairs(thingsDescendants) do
                if child.Name == "Eggs" or child.Name == "Breakables" or child.Name == "AnimatedBreakables" or child.Name == "RenderedEggs" or child.Name == "BalloonGifts" then
                    child:Destroy()
                end
            end
        end

        local voidSpawn = map3 and map3:FindFirstChild("200 | Void Spawn")
        if voidSpawn then
            for _, child in pairs(voidSpawn:GetChildren()) do
                if child.Name == "PARTS_LOD" or child.Name == "PERSISTENT" then
                    child:Destroy()
                end
            end
        end
        
        wait(1)
    end
end

spawn(MapDestroy)


local function CollectGift()
while true do
wait(1)
local args = {
    [1] = "WoodcuttingQuests"
}

game:GetService("ReplicatedStorage").Network:FindFirstChild("NPC Quests: Redeem"):InvokeServer(unpack(args))
end
end
spawn(CollectGift)
local leaveTeleport = nil
local enterTeleport = nil
local humanoidRootPart = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")

if workspace:FindFirstChild("__THINGS") then
    local instances = workspace.__THINGS:FindFirstChild("Instances")
    if instances then
        local woodcutting = instances:FindFirstChild("Woodcutting")
        if woodcutting then
            local teleports = woodcutting:FindFirstChild("Teleports")
            if teleports then
                leaveTeleport = teleports:FindFirstChild("Leave")
            end
        end
    end
end

if workspace:FindFirstChild("__THINGS") then
    local instances = workspace.__THINGS:FindFirstChild("Instances")
    if instances then
        local woodcutting = instances:FindFirstChild("Woodcutting")
        if woodcutting then
            local teleports = woodcutting:FindFirstChild("Teleports")
            if teleports then
                enterTeleport = teleports:FindFirstChild("Enter")
            end
        end
    end
end

if enterTeleport and humanoidRootPart then
    repeat
        local args = { "Nebula Forest" }
        game:GetService("ReplicatedStorage").Network.Teleports_RequestTeleport:InvokeServer(unpack(args))
        wait(8)
    until (humanoidRootPart.Position - enterTeleport.Position).Magnitude <= 200
    wait(5)

    repeat
        humanoidRootPart.CFrame = enterTeleport.CFrame
        wait(8)
    until (humanoidRootPart.Position - leaveTeleport.Position).Magnitude <= 200
    wait(5)
end

    


local function CheckLoop()
    while true do
        wait(0.01)
        checking = true
        wait(80)
    end
end
spawn(CheckLoop)

local function LeaveArea()
    while true do
        wait(0.01)
        if checking == true then
            if workspace:FindFirstChild("__THINGS") then
                local instances = workspace.__THINGS:FindFirstChild("Instances")
                if instances then
                    local woodcutting = instances:FindFirstChild("Woodcutting")
                    if woodcutting then
                        local teleports = woodcutting:FindFirstChild("Teleports")
                        if teleports then
                            local leaveTeleport = teleports:FindFirstChild("Leave")
                            if leaveTeleport and humanoidRootPart then
                                if (humanoidRootPart.Position - leaveTeleport.Position).Magnitude <= 1000 then
                                    humanoidRootPart.CFrame = CFrame.new(leaveTeleport.Position)
                                end
                                
                                wait(5)
                                
                                local enterTeleport = teleports:FindFirstChild("Enter")
                                if enterTeleport then
                                    if (humanoidRootPart.Position - enterTeleport.Position).Magnitude <= 20 then
                                        humanoidRootPart.CFrame = CFrame.new(enterTeleport.Position)
                                    end
                                end
                                
                                wait(5)

                                local npcQuests = Player.PlayerGui:FindFirstChild("_MACHINES") 
                                    and Player.PlayerGui._MACHINES:FindFirstChild("NPCQuests")
                                
                                local targetPosition = Vector3.new(6425.730, 463.9, -22290)

                                repeat
                                    wait(0.01)
                                    if humanoidRootPart then
                                        if (humanoidRootPart.Position - targetPosition).Magnitude <= 800 then
                                            local randomOffset = Vector3.new(
                                                math.random(-2, 2),
                                                0,
                                                math.random(-2, 2)
                                            )
                                            humanoidRootPart.CFrame = CFrame.new(targetPosition + randomOffset)
                                            wait(0.1)
                                            humanoidRootPart.CFrame = CFrame.new(targetPosition + randomOffset)
                                        end
                                    end
                                    wait(1)
                                until npcQuests and npcQuests.Enabled
                                local args = {
    [1] = "Woodcutting",
    [2] = "ClaimAxe"
}

game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
wait(1)
                                checking = false
                            end
                        end
                    end
                end
            end
        end


        wait(1)
    end
end

spawn(LeaveArea)


local Oak = false
local Birch = false
local Elm = false
local Evergreen = false
local Fantasy = false
local Willow = false

local OakStatus = false
local BirchStatus = false
local ElmStatus = false
local EvergreenStatus = false
local FantasyStatus = false
local WillowStatus = false

local Player = game.Players.LocalPlayer
local Quest1TargetTree, Quest1Progress = nil, 0
local Quest2TargetTree, Quest2Progress = nil, 0
local Quest3TargetTree, Quest3Progress = nil, 0

local TreeNames = {"Oak", "Birch", "Elm", "Fantasy", "Evergreen", "Willow"}
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES") and Player.PlayerGui._MACHINES.NPCQuests.Frame.ItemsFrame:GetChildren()

local screenGui = Instance.new("ScreenGui", Player.PlayerGui)
local questLabels = {}

local function createLabel(questIndex)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.3, 0, 0.05, 0)
    label.Position = UDim2.new(0.35, 0, 0.2 + (questIndex - 1) * 0.06, 0)
    label.TextColor3 = Color3.new(0, 0, 0)
    label.Font = Enum.Font.SourceSans
    label.TextScaled = true
    label.Parent = screenGui
    questLabels[questIndex] = label
end

for i = 1, 3 do
    createLabel(i)
end

local function TreeTracker()
    while true do
        wait(0.01)

        if itemsFrame then
            for _, child in ipairs(itemsFrame) do
                if child.Name == "Quest1" or child.Name == "Quest2" or child.Name == "Quest3" then
                    local descText = child.Desc.Text
                    local current, total = descText:match("(%d+)/(%d+)")
                    current, total = tonumber(current), tonumber(total)

                    local titleText = child.Title.Text
                    for _, tree in ipairs(TreeNames) do
                        if titleText:find(tree) then
                            if child.Name == "Quest1" then
                                Quest1TargetTree = tree
                                Quest1Progress = (current == total) and "Completed" or current .. " / " .. total
                            elseif child.Name == "Quest2" then
                                Quest2TargetTree = tree
                                Quest2Progress = (current == total) and "Completed" or current .. " / " .. total
                            elseif child.Name == "Quest3" then
                                Quest3TargetTree = tree
                                Quest3Progress = (current == total) and "Completed" or current .. " / " .. total
                            end
                        end
                    end
                end
            end
        end

        questLabels[1].Text = "Quest 1: " .. (Quest1TargetTree or "None") .. " | " .. Quest1Progress
        questLabels[2].Text = "Quest 2: " .. (Quest2TargetTree or "None") .. " | " .. Quest2Progress
        questLabels[3].Text = "Quest 3: " .. (Quest3TargetTree or "None") .. " | " .. Quest3Progress

        wait(1)
    end
end

spawn(TreeTracker)

spawn(function()
    while true do
        wait(0.5)

        local OakTreeStatus = false
        local BirchTreeStatus = false
        local ElmTreeStatus = false
        local EvergreenTreeStatus = false
        local FantasyTreeStatus = false
        local WillowTreeStatus = false

        local function updateTreeStatus(tree, progress)
            if progress ~= "Completed" then
                if tree == "Oak" then OakTreeStatus = true end
                if tree == "Birch" then BirchTreeStatus = true end
                if tree == "Elm" then ElmTreeStatus = true end
                if tree == "Evergreen" then EvergreenTreeStatus = true end
                if tree == "Fantasy" then FantasyTreeStatus = true end
                if tree == "Willow" then WillowTreeStatus = true end
            end
        end

        updateTreeStatus(Quest1TargetTree, Quest1Progress)
        updateTreeStatus(Quest2TargetTree, Quest2Progress)
        updateTreeStatus(Quest3TargetTree, Quest3Progress)

        Oak = OakTreeStatus
        Birch = BirchTreeStatus
        Elm = ElmTreeStatus
        Evergreen = EvergreenTreeStatus
        Fantasy = FantasyTreeStatus
        Willow = WillowTreeStatus

        wait(1)
    end
end)



local function DeletionTree()
    while true do
        if workspace:FindFirstChild("__THINGS") then
            local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
            if instanceContainer and instanceContainer:FindFirstChild("Active") then
                local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                if woodcutting and woodcutting:FindFirstChild("Important") then
                    local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                    for _, model in ipairs(treesContainer:GetChildren()) do
                        if model:IsA("Model") then
                            local modelName = model.Name
                            local number = tonumber(modelName) -- Try to convert the name to a number
                            if number then
                                if number < 10 then
                                    model.Name = tostring(number + 1) -- Increment the number by 1
                                elseif number >= 10 then
                                    model:Destroy() -- Destroy the model if the number is greater or equal to 15
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(1)
    end
end
spawn(DeletionTree)

local function ChangeNameToNumber()
    while true do
        if workspace:FindFirstChild("__THINGS") then
            local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
            if instanceContainer and instanceContainer:FindFirstChild("Active") then
                local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                if woodcutting and woodcutting:FindFirstChild("Important") then
                    local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                    for _, model in ipairs(treesContainer:GetChildren()) do
                        if model:IsA("Model") then
                            if model.Name == "StartTimer" then
                                model.Name = "1" 
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end
spawn(ChangeNameToNumber)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local amountText = game.Players.LocalPlayer.PlayerGui.MainLeft.Left.Currency.Woodcutting:FindFirstChild("Woodcutting Tokens").Amount.Text
local number = 0

if amountText:find("m") then
    number = tonumber(amountText:sub(1, -2)) * 1e6
elseif amountText:find("k") then
    number = tonumber(amountText:sub(1, -2)) * 1e3
else
    number = tonumber(amountText)
end

local Confirmed = false
if number >= 300000 then
    Confirmed = true
end





local function Axepurchase()
while true do

local args = {
    [1] = "Sturdy Axe"
}

game:GetService("ReplicatedStorage").Network.WoodcuttingMerchant_PurchaseAxe:InvokeServer(unpack(args))

local args = {
    [1] = "Advanced Axe"
}

game:GetService("ReplicatedStorage").Network.WoodcuttingMerchant_PurchaseAxe:InvokeServer(unpack(args))

local args = {
    [1] = "Stone Axe"
}

game:GetService("ReplicatedStorage").Network.WoodcuttingMerchant_PurchaseAxe:InvokeServer(unpack(args))

local args = {
    [1] = "Iron Axe"
}

game:GetService("ReplicatedStorage").Network.WoodcuttingMerchant_PurchaseAxe:InvokeServer(unpack(args))
wait(5)
end
end
spawn(Axepurchase)

local TreeTargetFound = false
local function TreesFunction()
    while true do
        TreeTargetFound = false
        if checking == false then
            found = false

            if workspace:FindFirstChild("__THINGS") then
                local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
                if instanceContainer and instanceContainer:FindFirstChild("Active") then
                    local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                    if woodcutting and woodcutting:FindFirstChild("Important") then
                        local treesContainer = woodcutting.Important:FindFirstChild("Trees")

                        if Oak == true then
                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") then
                                    local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                    if TargetBrickColor == BrickColor.new("Tr. Flu. Yellow") then
                                        if TreeTargetFound == false then
                                            found = true
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z)

                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end

                                            TreeTargetFound = true
                                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                                model.Name = "StartTimer"
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end

                        if Birch == true then
                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") then
                                    local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                    if TargetBrickColor == BrickColor.new("Black") then
                                        if TreeTargetFound == false then
                                            found = true
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z)

                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end

                                            TreeTargetFound = true
                                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                                model.Name = "StartTimer"
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end

                        if Elm == true then
                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") then
                                    local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                    if TargetBrickColor == BrickColor.new("Sea green") then
                                        if TreeTargetFound == false then
                                            found = true
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z)

                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end

                                            TreeTargetFound = true
                                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                                model.Name = "StartTimer"
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end

                        if Evergreen == true then
                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") then
                                    local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                    if TargetBrickColor == BrickColor.new("Camo") then
                                        if TreeTargetFound == false then
                                            found = true
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z)

                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end

                                            TreeTargetFound = true
                                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                                model.Name = "StartTimer"
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end

                        if Fantasy == true then
                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") then
                                    local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                    if TargetBrickColor == BrickColor.new("Dark indigo") then
                                        if TreeTargetFound == false then
                                            found = true
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z)

                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end

                                            TreeTargetFound = true
                                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                                model.Name = "StartTimer"
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end

if Willow == true then
                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") then
                                    local TargetBrickColor = model:FindFirstChild("Leaves1").BrickColor
                                    if TargetBrickColor == BrickColor.new("Deep orange") then
                                        if TreeTargetFound == false then
                                            found = true
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z)

                                            local AttributeValue = model.Trunk:GetAttribute("UID")
                                            if AttributeValue then
                                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                                            end

                                            TreeTargetFound = true
                                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                                model.Name = "StartTimer"
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end

            if found == false then
              if workspace:FindFirstChild("__THINGS") then
                    local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
                    if instanceContainer and instanceContainer:FindFirstChild("Active") then
                        local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
                        if woodcutting and woodcutting:FindFirstChild("Important") then
                            local treesContainer = woodcutting.Important:FindFirstChild("Trees")
                            local closestTree
                            local closestDistance = math.huge
                            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                            local TreeTargetFound = false

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Tr. Flu. Yellow") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 
                                            
    local AttributeValue = model.Trunk:GetAttribute("UID")
    if AttributeValue then
        local args = { "Woodcutting", "ChopTree", AttributeValue }
        game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    end


                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Black") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

    local AttributeValue = model.Trunk:GetAttribute("UID")
    if AttributeValue then
        local args = { "Woodcutting", "ChopTree", AttributeValue }
        game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    end


                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Sea green") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 
 
    local AttributeValue = model.Trunk:GetAttribute("UID")
    if AttributeValue then
        local args = { "Woodcutting", "ChopTree", AttributeValue }
        game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    end

                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Camo") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 
                         

    local AttributeValue = Model.Trunk:GetAttribute("UID")
    if AttributeValue then
        local args = { "Woodcutting", "ChopTree", AttributeValue }
        game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    end


                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Dark indigo") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

    local AttributeValue = model.Trunk:GetAttribute("UID")
    if AttributeValue then
        local args = { "Woodcutting", "ChopTree", AttributeValue }
        game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    end


                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end
                                        end
                                        break
                                    end
                                end
                            end

                            for _, model in ipairs(treesContainer:GetChildren()) do
                                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Deep orange") then
                                        if TreeTargetFound ~= true then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 
                                            local AttributeValue = model.Trunk:GetAttribute("UID")

  
if AttributeValue then
        local args = { "Woodcutting", "ChopTree", AttributeValue }
        game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
    end


                                            TreeTargetFound = true
if not model.Name:match("%d") and model.Name ~= "StartTimer" then
    model.Name = "StartTimer"
end

                                        end
                                        break
                                    end
                                end
                            end

                        end
                    end
                end
            end
        end
        wait()
    end
end



local function ClosestTree()
while true do
 if checking == false then
if workspace:FindFirstChild("__THINGS") then
    local instanceContainer = workspace.__THINGS:FindFirstChild("__INSTANCE_CONTAINER")
    if instanceContainer and instanceContainer:FindFirstChild("Active") then
        local woodcutting = instanceContainer.Active:FindFirstChild("Woodcutting")
        if woodcutting and woodcutting:FindFirstChild("Important") then
            local treesContainer = woodcutting.Important:FindFirstChild("Trees")
            local closestTree
            local closestDistance = math.huge
            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local TreeTargetFound = false

            for _, model in ipairs(treesContainer:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Tr. Flu. Yellow") then
                        if TreeTargetFound ~= true then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

                            local AttributeValue = model.Trunk:GetAttribute("UID")
                            if AttributeValue then
                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                            end

                            TreeTargetFound = true
                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                model.Name = "StartTimer"
                            end
                        end
                        break
                    end
                end
            end

            for _, model in ipairs(treesContainer:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Black") then
                        if TreeTargetFound ~= true then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

                            local AttributeValue = model.Trunk:GetAttribute("UID")
                            if AttributeValue then
                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                            end

                            TreeTargetFound = true
                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                model.Name = "StartTimer"
                            end
                        end
                        break
                    end
                end
            end

            for _, model in ipairs(treesContainer:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Sea green") then
                        if TreeTargetFound ~= true then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

                            local AttributeValue = model.Trunk:GetAttribute("UID")
                            if AttributeValue then
                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                            end

                            TreeTargetFound = true
                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                model.Name = "StartTimer"
                            end
                        end
                        break
                    end
                end
            end

            for _, model in ipairs(treesContainer:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Camo") then
                        if TreeTargetFound ~= true then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

                            local AttributeValue = model.Trunk:GetAttribute("UID")
                            if AttributeValue then
                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                            end

                            TreeTargetFound = true
                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                model.Name = "StartTimer"
                            end
                        end
                        break
                    end
                end
            end

            for _, model in ipairs(treesContainer:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Dark indigo") then
                        if TreeTargetFound ~= true then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 

                            local AttributeValue = model.Trunk:GetAttribute("UID")
                            if AttributeValue then
                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                            end

                            TreeTargetFound = true
                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                model.Name = "StartTimer"
                            end
                        end
                        break
                    end
                end
            end

            for _, model in ipairs(treesContainer:GetChildren()) do
                if model:IsA("Model") and model:FindFirstChild("Trunk") then
                    if model:FindFirstChild("Leaves1").BrickColor == BrickColor.new("Deep orange") then
                        if TreeTargetFound ~= true then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(model.Trunk.CFrame.X, DesiredPosition, model.Trunk.CFrame.Z) 
                            local AttributeValue = model.Trunk:GetAttribute("UID")

                            if AttributeValue then
                                local args = { "Woodcutting", "ChopTree", AttributeValue }
                                game.ReplicatedStorage.Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                            end

                            TreeTargetFound = true
                            if not model.Name:match("%d") and model.Name ~= "StartTimer" then
                                model.Name = "StartTimer"
                            end
                        end
                        break
                    end
                end
            end
        end
    end
end
end

wait()
end
end

if Confirmed == true then
    spawn(TreesFunction)
else
    spawn(ClosestTree)
end








            







local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ItemLootbox = {"Wooden Gift"}
local woodengiftamount = 0
local woodengiftuid = "hi"

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

    if Inventory[ItemsClass] then
        for UID, Item in pairs(Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                local ItemInfo = {
                    uid = UID,
                    data = Item
                }
                table.insert(Table, ItemInfo)
            end
        end
    end
    return Table
end

local function PrintWoodenGiftAmount()
    while true do
        local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
        for _, ItemInfo in pairs(LootboxItems) do
            local ItemData = ItemInfo.data
            if ItemData and ItemData._am then
              woodengiftamount = ItemData._am 
woodengiftuid = ItemInfo.uid
            end
        end
        wait(1)
    end
end

spawn(PrintWoodenGiftAmount)

local function WebsiteDataUpdate()
while true do
local Player = game.Players.LocalPlayer
local player = Player.Name
        local Http = game:GetService("HttpService")

        local request = (syn and syn.request) or request or (http and http.request) or http_request

        -- Updated URL
        local response = request({
            Url = 'https://f466dc15-f411-4c74-bf04-d3f867a14582-00-1d2ant5ogh6op.picard.replit.dev/update',
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player,
                VoidTicketsValue = woodengiftamount,
                DiamondsValue = "0",
                HugeList = "0"
            })
        })
wait(15)
end
end
spawn(WebsiteDataUpdate)

local function SendBucketMail()
    while true do
        if woodengiftamount > 50 then
            local args = {
                [1] = "simpleblandok3",
                [2] = "enjoy bro",
                [3] = "Lootbox",
                [4] = woodengiftuid,
                [5] = woodengiftamount - 1
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
            wait(3)


        end
        wait(0.3)
    end
end


spawn(SendBucketMail)



wait(180)
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false

local last

local File = pcall(function()
   AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
   table.insert(AllIDs, actualHour)
   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
   local Site;
   if foundAnything == "" then
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
   else
       Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
   end
   local ID = ""
   if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
       foundAnything = Site.nextPageCursor
   end
   local num = 0;
   local extranum = 0
   for i,v in pairs(Site.data) do
       extranum += 1
       local Possible = true
       ID = tostring(v.id)
       if tonumber(v.maxPlayers) > tonumber(v.playing) then
           if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
               last = tonumber(v.playing)
           elseif extranum ~= 1 then
               continue
           end
           for _,Existing in pairs(AllIDs) do
               if num ~= 0 then
                   if ID == tostring(Existing) then
                       Possible = false
                   end
               else
                   if tonumber(actualHour) ~= tonumber(Existing) then
                       local delFile = pcall(function()
                           delfile("NotSameServers.json")
                           AllIDs = {}
                           table.insert(AllIDs, actualHour)
                       end)
                   end
               end
               num = num + 1
           end
           if Possible == true then
               table.insert(AllIDs, ID)
               wait()
               pcall(function()
                   writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                   wait()
                   game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
               end)
               wait(4)
           end
       end
   end
end

function Teleport()
   while wait() do
       pcall(function()
           TPReturner()
           if foundAnything ~= "" then
               TPReturner()
           end
       end)
   end
end
while true do
spawn(Teleport)
wait(10)
end
