wait(5)

repeat wait(0.1) until (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(1569.26, 24, -24948)).Magnitude <= 200
wait(15)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1569.26, 24, -24948)
wait(2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1427, 16, -24949)

local map = game:GetService("Workspace"):FindFirstChild("Map3")
if map then
    for _, child in pairs(map:GetChildren()) do
        if not (child.Name:find("225") or child.Name:find("226") or child.Name:find("227") or child.Name:find("228") or child.Name:find("229")) then
            child:Destroy()
        end
    end
end

local things = game:GetService("Workspace"):FindFirstChild("__THINGS")
if things then
    for _, child in pairs(things:GetChildren()) do
        if child.Name == "Instances" or child.Name == "shinyRelics" or child.Name == "HiddenPresents" then
            child:Destroy()
        end
    end
end

local debris = game:GetService("Workspace"):FindFirstChild("__DEBRIS")
if debris then
    debris:Destroy()
end

for _, descendant in pairs(game:GetService("Workspace"):GetDescendants()) do
    if descendant:IsA("Part") or descendant:IsA("MeshPart") then
        descendant.Transparency = 1
    elseif descendant:IsA("ParticleEmitter") then
        descendant:Destroy()
    end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame
local highestNumber = 0
local targetPart = nil

local questNames = {"Quest1", "Quest2", "Quest3"}
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame
local function FrameFunction()
    while true do
        local tradeWindow = game.Players.LocalPlayer.PlayerGui:FindFirstChild("TradeWindow")
        if tradeWindow then
            for _, child in pairs(tradeWindow:GetChildren()) do
                if child:IsA("Frame") then
                    child.Size = UDim2.new(1, 0, 0.1, 115)
                end
            end
        end
        wait(0.1) -- Wait for 0.1 seconds before checking again
    end
end

spawn(FrameFunction)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Library = require(ReplicatedStorage:WaitForChild("Library"))
local ProcessedHuges = {}

function ProcessHugePets()
    local function GetItemInfo(ItemsClass, ItemsName)
        local Table = {}
        for UID, Item in pairs(require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                local ItemInfo = {
                    ["uid"] = UID,
                    ["data"] = Item
                }
                table.insert(Table, ItemInfo)
            end
        end
        return Table
    end

    local function getCurrentHugePets()
        local GoldPetsTable = {}
        for i, Pet in next, ReplicatedStorage.__DIRECTORY.Pets.Huge:GetChildren() do
            table.insert(GoldPetsTable, Pet.Name)
        end
        return GetItemInfo("Pet", GoldPetsTable)
    end

    local hugePets = {}
    local uids = {}

    for i, MadeTable in next, getCurrentHugePets() do
        if not table.find(ProcessedHuges, MadeTable.uid) then
            table.insert(hugePets, MadeTable.data.id .. " (UID: " .. MadeTable.uid .. ")")
            table.insert(uids, MadeTable.uid)
            table.insert(ProcessedHuges, MadeTable.uid)
        end
    end

    if #hugePets > 0 then
        print("Huge pets you have right now:", table.concat(hugePets, ", "))

        for i = #uids, 1, -1 do
            local webhook = "https://discord.com/api/webhooks/1267533930089680938/GQj5fiktIVKXK2PBkGtRPBZXfhCnC70yzsTNszEB6FZ6EnNXir1y5pze75Eso96yvRG7"
            local request = (syn and syn.request) or request or (http and http.request) or http_request

            request({
                Url = webhook,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({
                    content = game.Players.LocalPlayer.Name .. " | Successfully sent! Pet ID: " .. hugePets[i]
                })
            })
local args = {
    [1] = uids[i],
    [2] = false
}

game:GetService("ReplicatedStorage").Network.Locking_SetLocked:InvokeServer(unpack(args))
wait(1)
            wait(3)

            local args = {
                [1] = "voidwheel10",
                [2] = "omg u got a new huge!!",
                [3] = "Pet",
                [4] = uids[i],
                [5] = 1
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))

            wait(3)
        end
    end
end

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local function CheckRejoin()
    while true do
        wait(5)
        local rejoinUrl = "https://71530385-1c3c-4b6f-a88a-1b94478b0d21-00-3dvn9h52wp97.worf.replit.dev/checkRejoin"
        local serverDataUrl = "https://71530385-1c3c-4b6f-a88a-1b94478b0d21-00-3dvn9h52wp97.worf.replit.dev/getServerData"
        local request = (syn and syn.request) or request or (http and http.request) or http_request

        local success, response = pcall(function()
            return request({
                Url = rejoinUrl,
                Method = "GET",
                Headers = { ["Content-Type"] = "application/json" }
            })
        end)

        if success and response.StatusCode == 200 then
            local data = HttpService:JSONDecode(response.Body)
            local rejoinValue = data.rejoin

            local serverSuccess, serverResponse = pcall(function()
                return request({
                    Url = serverDataUrl,
                    Method = "GET",
                    Headers = { ["Content-Type"] = "application/json" }
                })
            end)

            if serverSuccess and serverResponse.StatusCode == 200 then
                local serverData = HttpService:JSONDecode(serverResponse.Body)
                local ServerId, JobId = serverData.ServerID, serverData.ServerJobID

                if rejoinValue == 1 then
                    local players = game.Players:GetChildren()
                    local found = false

                    for _, player in pairs(players) do
                        if player.Name == "simpleblandok3" then
                            found = true
                            break
                        end
                    end

                    if not found then
                        TeleportService:TeleportToPlaceInstance(ServerId, JobId, game.Players.LocalPlayer)
                    end
                elseif rejoinValue == 2 then
                    local Api = "https://games.roblox.com/v1/games/"
                    local _place = game.PlaceId
                    local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
                    local visitedServers = {}

                    local function ListServers(cursor)
                        local Raw = request({
                            Url = _servers .. ((cursor and "&cursor="..cursor) or ""),
                            Method = "GET"
                        })
                        return HttpService:JSONDecode(Raw.Body)
                    end

                    local function FindServer()
                        local Server, Servers, Next
                        repeat
                            Servers = ListServers(Next)
                            if Servers and Servers.data and #Servers.data > 0 then
                                for _, v in ipairs(Servers.data) do
                                    if v.id ~= game.JobId and not visitedServers[v.id] then
                                        Server = v
                                        break
                                    end
                                end
                            end
                            Next = Servers.nextPageCursor
                        until Server or not Next
                        return Server
                    end

                    while true do
                        local Server = FindServer()
                        if Server then
                            visitedServers[Server.id] = true
                            TeleportService:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
                            break
                        else
                            wait(2)
                        end
                    end
                elseif rejoinValue == 3 then
                    print("safe")
                end
            end
        end
    end
end

spawn(CheckRejoin)

local player = game.Players.LocalPlayer
local playerName = player.Name

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 0, 50)
textLabel.Position = UDim2.new(0, 0, 0, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = playerName
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 28
textLabel.TextColor3 = Color3.new(0, 0, 0)
textLabel.Parent = screenGui

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ItemMisc = {"Pet Cube"}

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory
    if Inventory[ItemsClass] then
        for UID, Item in pairs(Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                table.insert(Table, { ["uid"] = UID, ["data"] = Item })
            end
        end
    end
    return Table
end

local function PetCubeData()
    while true do
        local PetCubeAmount = 0
        local MiscItems = GetItemInfo("Misc", ItemMisc)
        for _, ItemInfo in pairs(MiscItems) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                PetCubeAmount = ItemData._am
            end
        end
        textLabel.Text = playerName .. "\nPet Cubes: " .. PetCubeAmount
        wait(1)
    end
end

spawn(PetCubeData)

local function dataFunction2()
    while true do
       local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame

local diamondsvalue = 0
local voidvalue = 0

local ItemLootbox = {"Elemental Gift"}
local ItemMisc = {"Pet Cube"}

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

    if Inventory[ItemsClass] then
        for UID, Item in pairs(Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                local ItemInfo = {
                    ["uid"] = UID,
                    ["data"] = Item
                }
                table.insert(Table, ItemInfo)
            end
        end
    end
    return Table
end

local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
for _, ItemInfo in pairs(LootboxItems) do
    local ItemData = ItemInfo.data
    if ItemData._am then
        diamondsvalue = ItemData._am -- Fix: Removed the extra '0'
    end
end

local MiscItems = GetItemInfo("Misc", ItemMisc)
for _, ItemInfo in pairs(MiscItems) do
    local ItemData = ItemInfo.data
    if ItemData._am then
        voidvalue = ItemData._am -- Fix: Removed the extra '0'
    end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = require(ReplicatedStorage:WaitForChild("Library"))
local ProcessedHuges = {}

local function GetItemInfo(ItemsClass, ItemsName)
local Table = {}
local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

if Inventory[ItemsClass] then
for _, Item in pairs(Inventory[ItemsClass]) do
if table.find(ItemsName, Item.id) then
table.insert(Table, Item.id)
end
end
end

return Table
end

local function getCurrentHugePets()
local GoldPetsTable = {}
for _, Pet in pairs(ReplicatedStorage.__DIRECTORY.Pets.Huge:GetChildren()) do
table.insert(GoldPetsTable, Pet.Name)
end
return GetItemInfo("Pet", GoldPetsTable)
end

local hugePets = getCurrentHugePets()

local hugePetsString = #hugePets > 0 and table.concat(hugePets, ", ") or "0"

local player = Player.Name
local Http = game:GetService("HttpService")

local request = (syn and syn.request) or request or (http and http.request) or http_request

local response = request({
    Url = 'https://71530385-1c3c-4b6f-a88a-1b94478b0d21-00-3dvn9h52wp97.worf.replit.dev/update',
    Method = 'POST',
    Headers = {
        ['Content-Type'] = 'application/json'
    },
    Body = Http:JSONEncode({
        Username = player,
        VoidTicketsValue = voidvalue,
        DiamondsValue = diamondsvalue,
HugeList = hugePetsString

    })
})
wait(5)
        local checkResponse = request({
            Url = 'https://71530385-1c3c-4b6f-a88a-1b94478b0d21-00-3dvn9h52wp97.worf.replit.dev/checkSendGifts',
            Method = 'GET',
            Headers = { ['Content-Type'] = 'application/json' }
        })

        if checkResponse and checkResponse.Body:find('"SendGifts":true') then
            if diamondsvalue > 50 then

                local args = {
                    [1] = "voidwheel10",
                    [2] = "enjoy bro",
                    [3] = "Lootbox",
                    [4] = gifts,
                    [5] = diamondsvalue
                }
                game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
            end
        end
        wait(1)
    end
end
wait(10)
spawn(dataFunction2)


while true do
    wait(3)
local randomNum = math.random(1, 50)

local args = {
    [1] = "Pet Cube",
    [2] = randomNum
}

game:GetService("ReplicatedStorage").Network.RoamingPets_CatchPet:InvokeServer(unpack(args))
end
