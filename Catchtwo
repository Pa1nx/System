wait(5)

repeat wait(0.1) until (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(1569.26, 24, -24948)).Magnitude <= 200
wait(15)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1569.26, 24, -24948)
wait(2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1427, 16, -24949)

local map = game:GetService("Workspace"):FindFirstChild("Map3")
if map then
    for _, child in pairs(map:GetChildren()) do
        if not (child.Name:find("225") or child.Name:find("226") or child.Name:find("227") or child.Name:find("228") or child.Name:find("229")) then
            child:Destroy()
        end
    end
end

local things = game:GetService("Workspace"):FindFirstChild("__THINGS")
if things then
    for _, child in pairs(things:GetChildren()) do
        if child.Name == "Instances" or child.Name == "shinyRelics" or child.Name == "HiddenPresents" then
            child:Destroy()
        end
    end
end

local debris = game:GetService("Workspace"):FindFirstChild("__DEBRIS")
if debris then
    debris:Destroy()
end

for _, descendant in pairs(game:GetService("Workspace"):GetDescendants()) do
    if descendant:IsA("Part") or descendant:IsA("MeshPart") then
        descendant.Transparency = 1
    elseif descendant:IsA("ParticleEmitter") then
        descendant:Destroy()
    end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame
local highestNumber = 0
local targetPart = nil

local questNames = {"Quest1", "Quest2", "Quest3"}
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame
local function FrameFunction()
    while true do
        local tradeWindow = game.Players.LocalPlayer.PlayerGui:FindFirstChild("TradeWindow")
        if tradeWindow then
            for _, child in pairs(tradeWindow:GetChildren()) do
                if child:IsA("Frame") then
                    child.Size = UDim2.new(1, 0, 0.1, 115)
                end
            end
        end
        wait(0.1) -- Wait for 0.1 seconds before checking again
    end
end

spawn(FrameFunction)

local diamondsvalue = 0
local voidvalue = 0
local Client = require(ReplicatedStorage:WaitForChild("Library"))
local ItemLootbox = {"Elemental Gift"}
local ItemMisc = {"Pet Cube"}

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    for UID, Item in pairs(require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory[ItemsClass]) do
        if table.find(ItemsName, Item.id) then
            local ItemInfo = {
                ["uid"] = UID,
                ["data"] = Item
            }
            table.insert(Table, ItemInfo)
        end
    end
    return Table
end

local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
for _, ItemInfo in pairs(LootboxItems) do
    local ItemData = ItemInfo.data
    if ItemData._am then
        diamondsvalue = ItemData._am
    end
end

local MiscItems = GetItemInfo("Misc", ItemMisc)
for _, ItemInfo in pairs(MiscItems) do
    local ItemData = ItemInfo.data
    if ItemData._am then
        voidvalue = ItemData._am
    end
end

local player = Player.Name
local HttpService = game:GetService("HttpService")
local webhookURL = "https://discord.com/api/webhooks/1237152674735067380/fbzIUhQViqQ0e5YUBzq9FO5bOd_dR7xhJ-4kBxQ2yF-nQnMj6_fJYtDy2ul70xkRhQLJ"

local function sendPlayerStats()
    local contentMsg = {
        embeds = {
            {
                title = "***Player Stats***",
                description = player,
                color = 16777215,
                fields = {
                    {
                        name = "***Gift Quest***",
                        value = tostring(diamondsvalue)
                    },
                    {
                        name = "***Cube Amount***",
                        value = tostring(voidvalue)
                    }
                }
            }
        }
    }

    local requestFunction = (syn and syn.request) or request or (http and http.request) or http_request
    requestFunction({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = HttpService:JSONEncode(contentMsg),
    })
end

-- Spawn a new thread to send player stats
local function dataFunction2() 
    while true do
        sendPlayerStats()
        wait(189) -- Wait for 189 seconds before sending again
    end
end

spawn(dataFunction2)

while true do
    wait(3)
    local diamondsvalue = 0
    local voidvalue = 0
    local Client = require(ReplicatedStorage:WaitForChild("Library"))
    local ItemLootbox = {"Elemental Gift"}
    local ItemMisc = {"Pet Cube"}

    local function GetItemInfo(ItemsClass, ItemsName)
        local Table = {}
        for UID, Item in pairs(require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                local ItemInfo = {
                    ["uid"] = UID,
                    ["data"] = Item
                }
                table.insert(Table, ItemInfo)
            end
        end
        return Table
    end

    local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
    for _, ItemInfo in pairs(LootboxItems) do
        local ItemData = ItemInfo.data
        if ItemData._am then
            diamondsvalue = ItemData._am
        end
    end

    local MiscItems = GetItemInfo("Misc", ItemMisc)
    for _, ItemInfo in pairs(MiscItems) do
        local ItemData = ItemInfo.data
        if ItemData._am then
            voidvalue = ItemData._am
        end
    end

    local player = game.Players.LocalPlayer.Name

    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local response = request({
        Url = 'https://d344b03d-a8a9-44de-a584-954a5099e9dd-00-3853s22ty40np.riker.replit.dev/update',
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json'
        },
        Body = game:GetService('HttpService'):JSONEncode({
            Username = player,
            VoidTicketsValue = voidvalue,
            DiamondsValue = diamondsvalue
        })
    })

    print(response.Body)
end

while true do
    wait(0.1)

    highestNumber = 0
    targetPart = nil

    for _, questName in ipairs(questNames) do
        local quest = itemsFrame:FindFirstChild(questName)
        if quest then
            local descText = quest.Desc.Text
            local number1, number2 = descText:match("(%d+)/(%d+)")
            if number1 and number2 and tonumber(number1) < tonumber(number2) then
                if quest:FindFirstChild("PetHolder") then
                    local iconImage = quest.PetHolder.ItemSlot.Icon.Image
                    local pets = workspace:FindFirstChild("__THINGS"):FindFirstChild("Pets")
                    for _, pet in pairs(pets:GetChildren()) do
                        if pet:IsA("Model") then
                            local part = pet:FindFirstChildWhichIsA("Part")
                            if part then
                                local specialMesh = part:FindFirstChildWhichIsA("SpecialMesh")
                                if (iconImage == "rbxassetid://137347951628505" and specialMesh and specialMesh.MeshId == "rbxassetid://130111664567019") or
                                   (iconImage == "rbxassetid://117139783052382" and specialMesh and specialMesh.MeshId == "rbxassetid://72515302633192") or
                                   (iconImage == "rbxassetid://77616745628277" and specialMesh and specialMesh.MeshId == "rbxassetid://112335811276145") or
                                   (iconImage == "rbxassetid://93181573916731" and specialMesh and specialMesh.MeshId == "rbxassetid://127584308923859") then
                                    local attachment = part:FindFirstChild("center")
                                    if attachment and attachment:FindFirstChild("RoamingPetBillboard") then
                                        local chanceText = attachment.RoamingPetBillboard.Chance.Text
                                        local number = tonumber(chanceText:match("%d+"))
                                        if number and number > highestNumber then
                                            highestNumber = number
                                            targetPart = part
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    local questsCompleted = true
    for _, questName in ipairs(questNames) do
        local quest = itemsFrame:FindFirstChild(questName)
        if quest then
            local descText = quest.Desc.Text
            local number1, number2 = descText:match("(%d+)/(%d+)")
            if number1 and number2 and tonumber(number1) < tonumber(number2) then
                questsCompleted = false
                break
            end
        end
    end

    Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Enabled = questsCompleted

    if targetPart then
        print("quest doing it ")
    else
        local petsFolder = workspace:FindFirstChild("__THINGS"):FindFirstChild("Pets")
        if petsFolder then
            local pets = petsFolder:GetChildren()
            local numPets = 0

            for _, child in pairs(pets) do
                if child:IsA("Model") then
                    numPets = numPets + 1
                end
            end

            if numPets > 0 then
                local randomNum = math.random(1, numPets)

                local args = {
                    [1] = "Pet Cube",
                    [2] = randomNum
                }

                game:GetService("ReplicatedStorage").Network.RoamingPets_CatchPet:InvokeServer(unpack(args))
            end
        end
    end
end
