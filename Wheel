





if game.PlaceId ~= 17503543197 then
    while true do
        game.ReplicatedStorage.Network.World3Teleport:InvokeServer()
        wait(5)
    end
end
local waittime = 1
local function MailClaim()
while true do
    local player = game.Players.LocalPlayer
    
        local gui = player.PlayerGui:FindFirstChild("_MACHINES")
        if gui then
            local mailboxMachine = gui:FindFirstChild("MailboxMachine")
            if mailboxMachine then
                local giftsFrame = mailboxMachine:FindFirstChild("Frame") and mailboxMachine.Frame:FindFirstChild("GiftsFrame")
                if giftsFrame then
                    local itemsFrame = giftsFrame:FindFirstChild("ItemsFrame")
                    if itemsFrame then
                        local frameChild = itemsFrame:FindFirstChildWhichIsA("Frame")
                        if frameChild then
waittime = 40
                            local args = {
                                [1] = {
                                    [1] = frameChild.Name
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(MailClaim)
local found = false
local function MonitorAndSpin()
    while true do

        wait()
        repeat wait() until workspace:FindFirstChild("Map3")
        local map3 = workspace:FindFirstChild("Map3")

        repeat wait() until map3:FindFirstChild("200 | Void Spawn")
        local voidSpawn = map3:FindFirstChild("200 | Void Spawn")

        repeat wait() until voidSpawn:FindFirstChild("INTERACT")
        local interact = voidSpawn:FindFirstChild("INTERACT")

        repeat wait() until interact:FindFirstChild("Machines")
        local machines = interact:FindFirstChild("Machines")

        repeat wait() until machines:FindFirstChild("SpinnyWheel")
        local spinnyWheel = machines:FindFirstChild("SpinnyWheel")

        repeat wait() until spinnyWheel:FindFirstChild("SpinnyWheel")
        local spinnyWheelInstance = spinnyWheel:FindFirstChild("SpinnyWheel")

        repeat wait() until spinnyWheelInstance:FindFirstChild("SurfaceGui")
        local surfaceGui = spinnyWheelInstance:FindFirstChild("SurfaceGui")

        repeat wait() until surfaceGui:FindFirstChild("Wheel")
        local wheel = surfaceGui:FindFirstChild("Wheel")

        repeat wait() until wheel:FindFirstChild("WheelCore")
        local wheelCore = wheel:FindFirstChild("WheelCore")

for _, child in pairs(wheelCore:GetChildren()) do
            if child:IsA("Frame") and child.Name ~= "Line" then
found = true
                if child:FindFirstChild("PrizeRender") and child.PrizeRender.Icon.Image == "rbxassetid://15058306840" then
                    local args = { [1] = "VoidWheel" }
                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Spinny Wheel: Request Spin"):InvokeServer(unpack(args))
                end
            end
        end
    end
end

spawn(MonitorAndSpin)
local function chest()
    while true do
        wait(0.1)
        
        local args1 = {
            [1] = "Rainbow Mini Chest"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args1))

        local args2 = {
            [1] = "Large Gift Bag"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args2))

        local args5 = {
            [1] = "Mini Chest"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args5))
        
        local args3 = {
            [1] = "Gift Bag"
        }
        game:GetService("ReplicatedStorage").Network.GiftBag_Open:InvokeServer(unpack(args3))
    end
end

spawn(chest)

local SendAmount = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Client = require(ReplicatedStorage:WaitForChild("Library"))

local request = (syn and syn.request) or request or (http and http.request) or http_request

local ItemTable = {"Diamonds"}
local ItemVoid = {"Void Spinny Wheel Ticket"}

local VoidAmount = 0
local DiamondsID = 0
local DiamondsAmount = 0

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    for UID, Item in pairs(require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory[ItemsClass]) do
        if table.find(ItemsName, Item.id) then
            local ItemInfo = {
                ["uid"] = UID,
                ["data"] = Item
            }
            table.insert(Table, ItemInfo)
        end
    end
    return Table
end

local function PrintDiamonds()
    while true do
        local CurrencyItems = GetItemInfo("Currency", ItemTable)
        for _, ItemInfo in pairs(CurrencyItems) do
            local ItemData = ItemInfo.data
            if ItemData._am and ItemData.id == "Diamonds" then
                DiamondsID = ItemInfo.uid
                DiamondsAmount = ItemData._am
            end
        end

        local MiscItems = GetItemInfo("Misc", ItemVoid)
        for _, ItemInfo in pairs(MiscItems) do
            local ItemData = ItemInfo.data
            if ItemData._am and ItemData.id == "Void Spinny Wheel Ticket" then
                VoidAmount = ItemData._am
            end
        end

        wait(0.3)  -- Update interval for checking items
    end
end

spawn(PrintDiamonds)




local function senddiamonds()
while true do
if DiamondsAmount > 50000000 then
local args = {
            [1] = "giftbatch20",
            [2] = "best gang",
            [3] = "Currency",
            [4] = DiamondsID,
            [5] = DiamondsAmount - 100000
        }
        ReplicatedStorage.Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
        
end
wait(1)
end
end
spawn(senddiamonds)
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local placeId = game.PlaceId
local jobId = game.JobId

local function getPlayerCount()
    return #Players:GetPlayers()
end

local function rejoinServer()
    if getPlayerCount() > 7 then
        local PlaceID = game.PlaceId
        local AllIDs = {}
        local foundAnything = ""
        local actualHour = os.date("!*t").hour
        local last

        local File = pcall(function()
            AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
        end)
        if not File then
            table.insert(AllIDs, actualHour)
            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
        end

        function TPReturner()
            local Site
            if foundAnything == "" then
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end
            local ID = ""
            if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                foundAnything = Site.nextPageCursor
            end
            local num = 0
            local extranum = 0
            for i,v in pairs(Site.data) do
                extranum += 1
                local Possible = true
                ID = tostring(v.id)
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
                        last = tonumber(v.playing)
                    elseif extranum ~= 1 then
                        continue
                    end
                    for _,Existing in pairs(AllIDs) do
                        if num ~= 0 then
                            if ID == tostring(Existing) then
                                Possible = false
                            end
                        else
                            if tonumber(actualHour) ~= tonumber(Existing) then
                                local delFile = pcall(function()
                                    delfile("NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num = num + 1
                    end
                    if Possible then
                        table.insert(AllIDs, ID)
                        wait()
                        pcall(function()
                            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                            wait()
                            TeleportService:TeleportToPlaceInstance(PlaceID, ID, player)
                        end)
                        wait(4)
                    end
                end
            end
        end

        function Teleport()
            while wait() do
                pcall(function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end)
            end
        end

        Teleport()
    elseif getPlayerCount() <= 7 then
        TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
    end
end

local function needto()
while true do
wait(20)
TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
end
end
spawn(needto)

repeat wait() until found == true
wait(2)
rejoinServer()


