local function MonitorAndSpin()
    while true do

        wait(0.01)
        repeat wait(0.0001) until workspace:FindFirstChild("Map3")
        local map3 = workspace:FindFirstChild("Map3")

        repeat wait(0.0001) until map3:FindFirstChild("200 | Void Spawn")
        local voidSpawn = map3:FindFirstChild("200 | Void Spawn")

        repeat wait(0.0001) until voidSpawn:FindFirstChild("INTERACT")
        local interact = voidSpawn:FindFirstChild("INTERACT")

        repeat wait(0.0001) until interact:FindFirstChild("Machines")
        local machines = interact:FindFirstChild("Machines")

        repeat wait(0.0001) until machines:FindFirstChild("SpinnyWheel")
        local spinnyWheel = machines:FindFirstChild("SpinnyWheel")

        repeat wait(0.0001) until spinnyWheel:FindFirstChild("SpinnyWheel")
        local spinnyWheelInstance = spinnyWheel:FindFirstChild("SpinnyWheel")

        repeat wait(0.0001) until spinnyWheelInstance:FindFirstChild("SurfaceGui")
        local surfaceGui = spinnyWheelInstance:FindFirstChild("SurfaceGui")

        repeat wait(0.0001) until surfaceGui:FindFirstChild("Wheel")
        local wheel = surfaceGui:FindFirstChild("Wheel")

        repeat wait(0.0001) until wheel:FindFirstChild("WheelCore")
        local wheelCore = wheel:FindFirstChild("WheelCore")

for _, child in pairs(wheelCore:GetChildren()) do
            if child:IsA("Frame") and child.Name ~= "Line" then
                if child:FindFirstChild("PrizeRender") and child.PrizeRender.Icon.Image == "rbxassetid://15058306840" then
                    local args = { [1] = "VoidWheel" }
                    game:GetService("ReplicatedStorage").Network:FindFirstChild("Spinny Wheel: Request Spin"):InvokeServer(unpack(args))
                end
            end
        end
    end
end

spawn(MonitorAndSpin)
wait(10)

local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"
local _place = game.PlaceId
local _servers = Api .. _place .. "/servers/Public?sortOrder=Asc&limit=100"

local function ListServers(cursor)
    local success, result = pcall(function()
        return game:HttpGet(_servers .. ((cursor and "&cursor=" .. cursor) or ""))
    end)
    if success then
        return Http:JSONDecode(result)
    else
        return nil
    end
end

local Server, Next
repeat
    local Servers = ListServers(Next)
    if Servers and Servers.data and #Servers.data > 0 then
        Server = Servers.data[1]
        Next = Servers.nextPageCursor
    else
        -- No servers found, wait 3 seconds and retry
        wait(3)
        Server = nil
    end
until Server

local currentServerId = game.JobId
TPS:TeleportToPlaceInstance(game.PlaceId, Server.id, game.Players.LocalPlayer)

local function HasSwitchedServers()
    return game.JobId ~= currentServerId
end

repeat
    wait(5)
until HasSwitchedServers()

print("Successfully switched to a new server!")
