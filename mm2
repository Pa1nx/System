local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local Players = game:GetService("Players")
local humanoidRootPart, humanoid, ModelFound = nil, nil, ""

local function updateCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

updateCharacter()

player.CharacterAdded:Connect(function()
    wait(1) -- Wait for character to fully load
    updateCharacter()
end)

local function StartTablet()
    while true do
        local VirtualInputManager = game:GetService("VirtualInputManager")
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui

        local deviceSelect = playerGui:FindFirstChild("DeviceSelect")
        if not deviceSelect then return end

        local container = deviceSelect:FindFirstChild("Container")
        if not container then return end

        local tablet = container:FindFirstChild("Tablet")
        if not tablet then return end

        local button = tablet:FindFirstChild("Button")
        local phone = container:FindFirstChild("Phone")

        if phone then
            phone:Destroy()
        end

        wait(2)

        tablet.Position = UDim2.new(0, -90, 0, -250)

        wait(2)

        if button then
            VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + button.AbsoluteSize.X / 2, button.AbsolutePosition.Y + button.AbsoluteSize.Y / 2, 0, true, game, 1)
            VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + button.AbsoluteSize.X / 2, button.AbsolutePosition.Y + button.AbsoluteSize.Y / 2, 0, false, game, 1)
        end

        wait(1)
    end
end

spawn(StartTablet)

local function OpenInventory()
    while true do
        local VirtualInputManager = game:GetService('VirtualInputManager')

        local playerGui = game.Players.LocalPlayer.PlayerGui
        local mainGUI = playerGui:FindFirstChild("MainGUI")
        if not mainGUI then wait(2) continue end

        local gameSection = mainGUI:FindFirstChild("Game")
        if not gameSection then wait(2) continue end

        local inventory = gameSection:FindFirstChild("Inventory")
        if not inventory then wait(2) continue end

        local dock = inventory:FindFirstChild("Dock")
        if not dock then wait(2) continue end

        local inventoryDock = dock:FindFirstChild("Inventory")
        if inventoryDock then
            inventoryDock.Position = UDim2.new(0, 550, 0, 25)
            wait(1)
            local absPos = inventoryDock.AbsolutePosition
            local absSize = inventoryDock.AbsoluteSize

            local xPos = absPos.X + absSize.X / 2
            local yPos = absPos.Y + absSize.Y / 2

            VirtualInputManager:SendMouseButtonEvent(xPos, yPos, 0, true, game, 0)
            VirtualInputManager:SendMouseButtonEvent(xPos, yPos, 0, false, game, 0)
            wait(2)

            local holidayViewButton = inventory.Main.Weapons.Items.Tabs.Holiday:FindFirstChild("View")
            if holidayViewButton and holidayViewButton:IsA("TextButton") then
                getconnections(holidayViewButton.MouseButton1Click)[1]:Fire()
            end
            wait(2)

            local closeButton = inventory.Close:FindFirstChild("Button")
            if closeButton and closeButton:IsA("ImageButton") then
                getconnections(closeButton.MouseButton1Click)[1]:Fire()
            end
            wait(10)
        end
    end
end

spawn(OpenInventory)

local function KnifeData()
    while true do
        wait(60)
        local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        if playerGui then
            local mainGUI = playerGui:FindFirstChild("MainGUI")
            if mainGUI then
                local gameSection = mainGUI:FindFirstChild("Game")
                if gameSection then
                    local inventory = gameSection:FindFirstChild("Inventory")
                    if inventory then
                        local weapons = inventory:FindFirstChild("Main") and inventory.Main:FindFirstChild("Weapons")
                        if weapons then
                            local items = weapons:FindFirstChild("Items")
                            if items then
                                local holiday = items:FindFirstChild("Container") and items.Container:FindFirstChild("Holiday")
                                if holiday then
                                    local halloween = holiday:FindFirstChild("Container") and holiday.Container:FindFirstChild("Halloween")
                                    if halloween then
                                        local container = halloween:FindFirstChild("Container")
                                        if container then
                                            local webhookURL = "https://discord.com/api/webhooks/1240148195783213127/SCs8ji01gBTVw2G66fJDS2Z9Re6eeaXyD8uPRIIhahlsS9qCgPPtQ2NYPFdWlzyXoKo6"
                                            local httpService = game:GetService("HttpService")
                                            local playerName = game.Players.LocalPlayer.Name

                                            for _, frame in ipairs(container:GetChildren()) do
                                                if frame:IsA("Frame") and frame:FindFirstChild("ItemName") and frame.ItemName:FindFirstChild("Label") then
                                                    local labelText = frame.ItemName.Label.Text
                                                    if labelText == "Vampire's Gun" or string.find(labelText, "Vampire") then
                                                        print(labelText)
                                                        local webhookData = {
                                                            content = playerName .. " GOT THE FUCKING VAMPIRE LMAO"
                                                        }
                                                        local requestData = {
                                                            Url = webhookURL,
                                                            Method = "POST",
                                                            Headers = {
                                                                ["Content-Type"] = "application/json"
                                                            },
                                                            Body = httpService:JSONEncode(webhookData)
                                                        }
                                                        (syn and syn.request or request or (http and http.request) or http_request)(requestData)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

spawn(KnifeData)


wait(5)


local Player = game.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")
local loadingScreen = PlayerGui:FindFirstChild("Loading")

local function DestroyingScreen()
    while true do
        task.wait(50)
        loadingScreen = PlayerGui:FindFirstChild("Loading")
        if loadingScreen then
            -- Call the TPReturner function to server hop
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end
    end
end

spawn(DestroyingScreen)

local function TeleportingScript()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local last

    local File = pcall(function()
        AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
    end)
    if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
    end

    function TPReturner()
        local Site
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0
        local extranum = 0
        for i, v in pairs(Site.data) do
            extranum += 1
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
                    last = tonumber(v.playing)
                elseif extranum ~= 1 then
                    continue
                end
                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait()
                    pcall(function()
                        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(4)
                end
            end
        end
    end

    local function CheckConditionsAndTeleport()
        while true do
            wait(5)
            pcall(function()
                local teleportNeeded = false
                local playersInServer = game.Players:GetChildren()
                local localPlayer = game.Players.LocalPlayer

                if #playersInServer == 1 then
                    teleportNeeded = true
                else
                    for _, player in ipairs(playersInServer) do
                        if player.Name ~= localPlayer.Name and string.find(player.Name:lower(), "giftbatch") then
                            teleportNeeded = true
                            break
                        end
                    end
                end

                if teleportNeeded then
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end
            end)
        end
    end

    spawn(CheckConditionsAndTeleport)
end

spawn(TeleportingScript)



local function MapDeleter()
    while true do
      
for _, child in pairs(workspace:GetChildren()) do
    if child.Name == ModelFound then
        for _, modelChild in pairs(child:GetChildren()) do
            if modelChild.Name ~= "CoinContainer" then
                modelChild:Destroy()
            end
        end
    end
end

        wait(1)
    end
end

spawn(MapDeleter)

local player = game.Players.LocalPlayer

local function GetCandyData()
    local candyText
    pcall(function()
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local mainGUI = playerGui:FindFirstChild("MainGUI")
            if mainGUI then
                local gameSection = mainGUI:FindFirstChild("Game")
                if gameSection then
                    local coinBags = gameSection:FindFirstChild("CoinBags")
                    if coinBags then
                        local container = coinBags:FindFirstChild("Container")
                        if container then
                            local candy = container:FindFirstChild("Candy")
                            if candy then
                                local currencyFrame = candy:FindFirstChild("CurrencyFrame")
                                if currencyFrame then
                                    local icon = currencyFrame:FindFirstChild("Icon")
                                    if icon then
                                        local coins = icon:FindFirstChild("Coins")
                                        if coins then
                                            candyText = coins.Text
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
    
    return candyText and tonumber(candyText:match("%d+")) or 0
end

local function CoinBagChecker()
    while true do
        if getCoinValue() >= 40 and hasWeaponInBackpack(player) then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity")

            if BV then
                BV:Destroy()
            end
        end
        wait(0.1)
    end
end

spawn(CoinBagChecker)



local function CreateCandyDisplay()
    local screenGui = Instance.new("ScreenGui", player.PlayerGui)
    local candyLabel = Instance.new("TextLabel", screenGui)

    candyLabel.Size = UDim2.new(0, 200, 0, 50)
    candyLabel.Position = UDim2.new(0.5, -100, 0, 10) -- Centered at the top
    candyLabel.TextColor3 = Color3.new(1, 1, 1) -- White color
    candyLabel.TextScaled = true
    candyLabel.BackgroundTransparency = 1

    return candyLabel
end

local candyLabel = CreateCandyDisplay()

spawn(function()
    while true do
        local candyAmount = GetCandyData()
        candyLabel.Text = "Candy: " .. candyAmount
        wait(1) -- Update every second
    end
end)


local function getCoinValue()
    local coinText
    pcall(function()
        coinText = player.PlayerGui.MainGUI.Game.CoinBags.Container.Candy.CurrencyFrame.Icon.Coins.Text
    end)
    return coinText and tonumber(coinText:match("%d+")) or 0
end

local function hasWeaponInBackpack(plr)
    return plr:FindFirstChild("Backpack") and (plr.Backpack:FindFirstChild("Knife") or plr.Backpack:FindFirstChild("Gun"))
end



local function CoinContainerFinder()
    while true do
        for _, child in pairs(workspace:GetChildren()) do
            if child:IsA("Model") and child:FindFirstChild("CoinContainer") then
                ModelFound = child.Name
            end
        end
        wait(0.1)
    end
end

local function CaseOpener()
    while true do
Wait(1)
local args = {
    [1] = "Halloween2024Box",
    [2] = "MysteryBox",
    [3] = "Candies2024"
}

game:GetService("ReplicatedStorage").Remotes.Shop.OpenCrate:InvokeServer(unpack(args))
end
end
spawn(CaseOpener)
spawn(CoinBagChecker)
spawn(CoinContainerFinder)

local function startTweenToPart(part, speed)
    if not humanoidRootPart or humanoid.Health <= 0 then return end

    local tweenInfo = TweenInfo.new((humanoidRootPart.Position - part.Position).Magnitude / speed, Enum.EasingStyle.Linear)
    local targetCFrame = CFrame.new(part.Position - Vector3.new(0, 12, 0))
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
    tween.Completed:Wait()
end

local function TeleportingFunction()
    while true do
        if not humanoidRootPart or humanoid.Health <= 0 then
            updateCharacter()
            continue
        end

        local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
        BV.velocity = Vector3.new(0, 0.001, 0)
        BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

        local model = workspace:FindFirstChild(ModelFound)
        if model and model:FindFirstChild("CoinContainer") then
            local coinContainer = model.CoinContainer
            local closestPart, shortestDistance = nil, math.huge

            for _, part in pairs(coinContainer:GetChildren()) do
                local distance = (part.Position - humanoidRootPart.Position).Magnitude
                if distance <= 100 then
                    local inRadiusOfKnifePlayer = false
                    for _, otherPlayer in pairs(Players:GetPlayers()) do
                        if otherPlayer ~= player and hasWeaponInBackpack(otherPlayer) then
                            local otherHumanoidRootPart = otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart")
                            if otherHumanoidRootPart and (otherHumanoidRootPart.Position - part.Position).Magnitude <= 30 then
                                inRadiusOfKnifePlayer = true
                                break
                            end
                        end
                    end

                    if not inRadiusOfKnifePlayer and distance < shortestDistance then
                        closestPart = part
                        shortestDistance = distance
                    end
                end
            end

            if closestPart and getCoinValue() < 40 and humanoid.Health > 0 then
                if shortestDistance <= 25 then
                    startTweenToPart(closestPart, 55)
                else
                    startTweenToPart(closestPart, 35)
                end

                humanoidRootPart.CFrame = CFrame.new(closestPart.Position)
                wait(0.1)
                humanoidRootPart.CFrame = CFrame.new(closestPart.Position + Vector3.new(0, 1, 0))
                wait(0.1)
                humanoidRootPart.CFrame = CFrame.new(closestPart.Position - Vector3.new(0, 9, 0))

                if closestPart and closestPart.Parent == coinContainer then
                    closestPart:Destroy()
                end
            end
        end
        wait(1)
    end
end

spawn(TeleportingFunction)
