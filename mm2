local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local Players = game:GetService("Players")
local humanoidRootPart, humanoid, ModelFound = nil, nil, ""

local function updateCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

updateCharacter()

player.CharacterAdded:Connect(function()
    wait(1) -- Wait for character to fully load
    updateCharacter()
end)
local function StartTablet()
    while true do
wait(1)
        local VirtualInputManager = game:GetService("VirtualInputManager")
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui

        local deviceSelect = playerGui:FindFirstChild("DeviceSelect")
        if deviceSelect then
            local container = deviceSelect:FindFirstChild("Container")
            if container then
                local tablet = container:FindFirstChild("Tablet")
                if tablet then
                    local button = tablet:FindFirstChild("Button")
                    local phone = container:FindFirstChild("Phone")

                    if phone then
                        phone:Destroy()
                    end

                    wait(2)

                    tablet.Position = UDim2.new(0, -90, 0, -250)

                    wait(2)

                    if button then
                        VirtualInputManager:SendMouseButtonEvent(
                            button.AbsolutePosition.X + button.AbsoluteSize.X / 2,
                            button.AbsolutePosition.Y + button.AbsoluteSize.Y / 2,
                            0, true, game, 1
                        )
                        VirtualInputManager:SendMouseButtonEvent(
                            button.AbsolutePosition.X + button.AbsoluteSize.X / 2,
                            button.AbsolutePosition.Y + button.AbsoluteSize.Y / 2,
                            0, false, game, 1
                        )
                    end

                    wait(1)
                end
            end
        end
    end
end

spawn(StartTablet)

local function OpenInventory()
    while true do
        wait(1)

        local VirtualInputManager = game:GetService('VirtualInputManager')

        local player = game.Players.LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            local playerGui = player.PlayerGui
            if playerGui:FindFirstChild("MainGUI") then
                local mainGUI = playerGui.MainGUI
                if mainGUI:FindFirstChild("Game") then
                    local gameGui = mainGUI.Game
                    if gameGui:FindFirstChild("Dock") then
                        local dock = gameGui.Dock
                        if dock:FindFirstChild("Inventory") then
                            local inventory = dock.Inventory
                            inventory.Position = UDim2.new(0, 300, 0, 25)
                            wait(1)
                            local absPos = inventory.AbsolutePosition
                            local absSize = inventory.AbsoluteSize

                            local xPos = absPos.X + absSize.X / 2
                            local yPos = absPos.Y + absSize.Y / 2

                            VirtualInputManager:SendMouseButtonEvent(xPos, yPos, 0, true, game, 0)
                            VirtualInputManager:SendMouseButtonEvent(xPos, yPos, 0, false, game, 0)
                            wait(2)

                            if gameGui:FindFirstChild("Inventory") then
                                local invMain = gameGui.Inventory.Main
                                if invMain and invMain:FindFirstChild("Weapons") and invMain.Weapons:FindFirstChild("Items") then
                                    local items = invMain.Weapons.Items
                                    if items:FindFirstChild("Tabs") and items.Tabs:FindFirstChild("Holiday") then
                                        local holidayViewButton = items.Tabs.Holiday:FindFirstChild("View")
                                        if holidayViewButton and holidayViewButton:IsA("TextButton") then
                                            getconnections(holidayViewButton.MouseButton1Click)[1]:Fire()
                                        end
                                    end
                                end
                            end

                            wait(2)

                            if inventory:FindFirstChild("Close") and inventory.Close:FindFirstChild("Button") then
                                local closeButton = inventory.Close.Button
                                if closeButton:IsA("ImageButton") then
                                    getconnections(closeButton.MouseButton1Click)[1]:Fire()
                                end
                            end

                            wait(10)
                        end
                    end
                end
            end
        end
    end
end

spawn(OpenInventory)




local function KnifeData()
    while true do
        wait(60)
        local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        if playerGui then
            local mainGUI = playerGui:FindFirstChild("MainGUI")
            if mainGUI then
                local gameSection = mainGUI:FindFirstChild("Game")
                if gameSection then
                    local inventory = gameSection:FindFirstChild("Inventory")
                    if inventory then
                        local weapons = inventory:FindFirstChild("Main") and inventory.Main:FindFirstChild("Weapons")
                        if weapons then
                            local items = weapons:FindFirstChild("Items")
                            if items then
                                local holiday = items:FindFirstChild("Container") and items.Container:FindFirstChild("Holiday")
                                if holiday then
                                    local halloween = holiday:FindFirstChild("Container") and holiday.Container:FindFirstChild("Halloween")
                                    if halloween then
                                        local container = halloween:FindFirstChild("Container")
                                        if container then
                                            local webhookURL = "https://discord.com/api/webhooks/1240148195783213127/SCs8ji01gBTVw2G66fJDS2Z9Re6eeaXyD8uPRIIhahlsS9qCgPPtQ2NYPFdWlzyXoKo6"
                                            local httpService = game:GetService("HttpService")
                                            local playerName = game.Players.LocalPlayer.Name

                                            for _, frame in ipairs(container:GetChildren()) do
                                                if frame:IsA("Frame") and frame:FindFirstChild("ItemName") and frame.ItemName:FindFirstChild("Label") then
                                                    local labelText = frame.ItemName.Label.Text
                                                    if labelText == "Vampire's Gun" or string.find(labelText, "Vampire") then
                                                        print(labelText)
                                                        local webhookData = {
                                                            content = playerName .. " GOT THE FUCKING VAMPIRE LMAO"
                                                        }
                                                        local requestData = {
                                                            Url = webhookURL,
                                                            Method = "POST",
                                                            Headers = {
                                                                ["Content-Type"] = "application/json"
                                                            },
                                                            Body = httpService:JSONEncode(webhookData)
                                                        }
                                                        (syn and syn.request or request or (http and http.request) or http_request)(requestData)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

spawn(KnifeData)


wait(5)


local Player = game.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")
local loadingScreen = PlayerGui:FindFirstChild("Loading")

local function DestroyingScreen()
    while true do
        task.wait(50)
        loadingScreen = PlayerGui:FindFirstChild("Loading")
        if loadingScreen then
            -- Call the TPReturner function to server hop
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end
    end
end

spawn(DestroyingScreen)
















local function MapDeleter()
    while true do
      
for _, child in pairs(workspace:GetChildren()) do
    if child.Name == ModelFound then
        for _, modelChild in pairs(child:GetChildren()) do
            if modelChild.Name ~= "CoinContainer" then
                modelChild:Destroy()
            end
        end
    end
end

        wait(1)
    end
end

spawn(MapDeleter)

local player = game.Players.LocalPlayer
local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

local function GetCandyData()
    local candyText
    pcall(function()
        local playerGui = player:FindFirstChild("PlayerGui")
        if playerGui then
            local mainGUI = playerGui:FindFirstChild("MainGUI")
            if mainGUI then
                local gameSection = mainGUI:FindFirstChild("Game")
                if gameSection then
                    local coinBags = gameSection:FindFirstChild("CoinBags")
                    if coinBags then
                        local container = coinBags:FindFirstChild("Container")
                        if container then
                            local candy = container:FindFirstChild("SnowToken")
                            if candy then
                                local currencyFrame = candy:FindFirstChild("CurrencyFrame")
                                if currencyFrame then
                                    local icon = currencyFrame:FindFirstChild("Icon")
                                    if icon then
                                        local coins = icon:FindFirstChild("Coins")
                                        if coins then
                                            candyText = coins.Text
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
    return candyText and tonumber(candyText:match("%d+")) or 0
end

local function CheckCandyAndDamage()
    while true do
        wait(10)
        local candyValue = GetCandyData()
        if candyValue >= 40 then
            local player = game:GetService("Players").LocalPlayer
            local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:TakeDamage(humanoid.MaxHealth)
            end
        end
    end
end

spawn(CheckCandyAndDamage)



local function ServerChecked()
    while true do
        local players = game.Players:GetChildren()
        if #players <= 3 then
            local PlaceID = game.PlaceId
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local last

            local File = pcall(function()
                AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
            end)

            if not File then
                table.insert(AllIDs, actualHour)
                writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
            end

            local function TPReturner()
                local Site
                if foundAnything == "" then
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
                else
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
                end

                local ID = ""
                if Site.nextPageCursor then
                    foundAnything = Site.nextPageCursor
                end

                local num = 0
                local extranum = 0
                for _, v in pairs(Site.data) do
                    extranum += 1
                    local Possible = true
                    ID = tostring(v.id)
                    if tonumber(v.maxPlayers) > tonumber(v.playing) then
                        if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
                            last = tonumber(v.playing)
                        elseif extranum ~= 1 then
                            continue
                        end

                        for _, Existing in pairs(AllIDs) do
                            if num ~= 0 and ID == tostring(Existing) then
                                Possible = false
                                break
                            elseif num == 0 and tonumber(actualHour) ~= tonumber(Existing) then
                                pcall(function()
                                    delfile("NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num += 1

                        if Possible then
                            table.insert(AllIDs, ID)
                            pcall(function()
                                writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                            end)
                            wait(4)
                        end
                    end
                end
            end

            while wait() do
                pcall(function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end)
            end
            wait(10)
        end
        wait(0.4)
    end
end

spawn(TrackCandyChanges)




local function CreateCandyDisplay()
    local screenGui = Instance.new("ScreenGui", player.PlayerGui)
    local candyLabel = Instance.new("TextLabel", screenGui)

    candyLabel.Size = UDim2.new(0, 200, 0, 50)
    candyLabel.Position = UDim2.new(0.5, -100, 0, 10) -- Centered at the top
    candyLabel.TextColor3 = Color3.new(1, 1, 1) -- White color
    candyLabel.TextScaled = true
    candyLabel.BackgroundTransparency = 1

    return candyLabel
end

local candyLabel = CreateCandyDisplay()

spawn(function()
    while true do
        local candyAmount = GetCandyData()
        candyLabel.Text = "Candy: " .. candyAmount
        wait(5)
    end
end)


local function getCoinValue()
    local coinText
    pcall(function()
        coinText = player.PlayerGui.MainGUI.Game.CoinBags.Container.SnowToken.CurrencyFrame.Icon.Coins.Text
    end)
    return coinText and tonumber(coinText:match("%d+")) or 0
end

local LastCoinNumber = 0
local function CoinChecker()
    while true do
        wait(0.1)
        local coinText
        if player:FindFirstChild("PlayerGui") then
            local mainGUI = player.PlayerGui:FindFirstChild("MainGUI")
            if mainGUI then
                local gameGUI = mainGUI:FindFirstChild("Game")
                if gameGUI then
                    local coinBags = gameGUI:FindFirstChild("CoinBags")
                    if coinBags then
                        local container = coinBags:FindFirstChild("Container")
                        if container then
                            local candy = container:FindFirstChild("SnowToken")
                            if candy then
                                local currencyFrame = candy:FindFirstChild("CurrencyFrame")
                                if currencyFrame then
                                    local icon = currencyFrame:FindFirstChild("Icon")
                                    if icon then
                                        local coins = icon:FindFirstChild("Coins")
                                        if coins then
                                            coinText = coins.Text
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        LastCoinNumber = tonumber(coinText and coinText:match("%d+") or 0)
    end
end

local NumberTracker = 0
local function RejoinCoin()
    while true do
        local initialCoin = LastCoinNumber
        wait(1)
        local newCoin = LastCoinNumber
        
        if newCoin > initialCoin then
            NumberTracker = 0
        elseif newCoin == initialCoin then
            NumberTracker += 1
        end

        if NumberTracker >= 480 then
            local PlaceID = game.PlaceId
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local last

            local File = pcall(function()
                AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
            end)

            if not File then
                table.insert(AllIDs, actualHour)
                writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
            end

            local function TPReturner()
                local Site
                if foundAnything == "" then
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
                else
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
                end

                local ID = ""
                if Site.nextPageCursor then
                    foundAnything = Site.nextPageCursor
                end

                local num = 0
                local extranum = 0
                for _, v in pairs(Site.data) do
                    extranum += 1
                    local Possible = true
                    ID = tostring(v.id)
                    if tonumber(v.maxPlayers) > tonumber(v.playing) then
                        if extranum ~= 1 and tonumber(v.playing) < last or extranum == 1 then
                            last = tonumber(v.playing)
                        elseif extranum ~= 1 then
                            continue
                        end

                        for _, Existing in pairs(AllIDs) do
                            if num ~= 0 and ID == tostring(Existing) then
                                Possible = false
                                break
                            elseif num == 0 and tonumber(actualHour) ~= tonumber(Existing) then
                                pcall(function()
                                    delfile("NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num += 1

                        if Possible then
                            table.insert(AllIDs, ID)
                            pcall(function()
                                writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                            end)
                            wait(4)
                        end
                    end
                end
            end

            while wait() do
                pcall(function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end)
                wait(10)
            end
        end
        wait(0.1)
    end
end

spawn(CoinChecker)
spawn(RejoinCoin)


local function hasWeaponInBackpack(plr)
    return plr:FindFirstChild("Backpack") and (plr.Backpack:FindFirstChild("Knife") or plr.Backpack:FindFirstChild("Gun"))
end

local function CoinContainerFinder()
    while true do
        for _, child in pairs(workspace:GetChildren()) do
            if child:IsA("Model") and child:FindFirstChild("CoinContainer") then
                ModelFound = child.Name
            end
        end
        wait(0.1)
    end
end

local function CaseOpener()
    while true do
Wait(1)
local args = {
    [1] = "Halloween2024Box",
    [2] = "MysteryBox",
    [3] = "Candies2024"
}

game:GetService("ReplicatedStorage").Remotes.Shop.OpenCrate:InvokeServer(unpack(args))
end
end

spawn(CaseOpener)
spawn(CoinBagChecker)
spawn(CoinContainerFinder)

local LastPosition = ""
local player = game.Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local tweenInProgress = false
local processedPositions = {}

local function getHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:FindFirstChild("HumanoidRootPart")
end

local function GetTime(distance, speed)
    return distance / speed
end

local function tweenToPart(part, speed)
    if tweenInProgress or not part or not part:IsDescendantOf(workspace) then return end
    local humanoidRootPart = getHumanoidRootPart()
    if not humanoidRootPart then return end

    tweenInProgress = true
    local distance = (humanoidRootPart.Position - (part.Position - Vector3.new(0, 10, 0))).Magnitude
    local time = GetTime(distance, speed)
    local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = part.CFrame - Vector3.new(0, 10, 0)})

    local connection
    connection = tween.Completed:Connect(function()
        if not part or not part:IsDescendantOf(workspace) then
            tweenInProgress = false
            connection:Disconnect()
            return
        end

        local newHumanoidRootPart = getHumanoidRootPart()
        if newHumanoidRootPart then
            newHumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 1, 0)
            wait(0.05)
            newHumanoidRootPart.CFrame = part.CFrame - Vector3.new(0, 1, 0)
            wait(0.05)
            LastPosition = part.Position
        end
        tweenInProgress = false
        connection:Disconnect()
    end)

    tween:Play()

    while tweenInProgress do
        if not part or not part:IsDescendantOf(workspace) then
            tween:Cancel()
            tweenInProgress = false
            return
        end
        wait()
    end
end

local function AutoFarm()
    while true do
        local humanoidRootPart = getHumanoidRootPart()
        if humanoidRootPart then
            local candidates = {}

            for _, child in ipairs(workspace:GetChildren()) do
                if child:IsA("Model") and child:FindFirstChild("CoinContainer") then
                    local coinContainer = child.CoinContainer

                    for _, item in ipairs(coinContainer:GetChildren()) do
                        if item:IsA("Part") and not table.find(processedPositions, item.Position) then
                            local distance = (humanoidRootPart.Position - item.Position).Magnitude
                            if distance <= 300 then
                                table.insert(candidates, {Part = item, Distance = distance})
                            end
                        end
                    end
                end
            end

            table.sort(candidates, function(a, b)
                return a.Distance < b.Distance
            end)

            for i = 1, math.min(3, #candidates) do
                local selected = candidates[i]
                local speed = selected.Distance <= 50 and 40 or 35

                if selected.Part and selected.Part:IsDescendantOf(workspace) then
                    tweenToPart(selected.Part, speed)

                    while tweenInProgress do
                        if not selected.Part or not selected.Part:IsDescendantOf(workspace) then
                            break
                        end
                        wait()
                    end
                end
            end
        end
        wait(0.3)
    end
end

local function BodyVelocity()
    while true do
        wait(0.1)
        local humanoidRootPart = getHumanoidRootPart()
        if humanoidRootPart then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        end
    end
end

spawn(BodyVelocity)
spawn(AutoFarm)






local function CheckCandyAndDamage()
    while true do
        wait(10)
        local candyValue = GetCandyData()
        if candyValue >= 40 then
            humanoidRootPart.CFrame = LastPosition
        end
    end
end

spawn(CheckCandyAndDamage)
