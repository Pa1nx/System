


wait(3)

wait(0.5)local ba=Instance.new("ScreenGui")
local ca=Instance.new("TextLabel")local da=Instance.new("Frame")
local _b=Instance.new("TextLabel")local ab=Instance.new("TextLabel")ba.Parent=game.CoreGui
ba.ZIndexBehavior=Enum.ZIndexBehavior.Sibling;ca.Parent=ba;ca.Active=true
ca.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ca.Draggable=true
ca.Position=UDim2.new(0.698610067,0,0.098096624,0)ca.Size=UDim2.new(0,370,0,52)
ca.Font=Enum.Font.SourceSansSemibold;ca.Text="Anti AFK Script"ca.TextColor3=Color3.new(0,1,1)
ca.TextSize=22;da.Parent=ca
da.BackgroundColor3=Color3.new(0.196078,0.196078,0.196078)da.Position=UDim2.new(0,0,1.0192306,0)
da.Size=UDim2.new(0,370,0,107)_b.Parent=da
_b.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)_b.Position=UDim2.new(0,0,0.800455689,0)
_b.Size=UDim2.new(0,370,0,21)_b.Font=Enum.Font.Arial;_b.Text="made by ur mom "
_b.TextColor3=Color3.new(0,1,1)_b.TextSize=20;ab.Parent=da
ab.BackgroundColor3=Color3.new(0.176471,0.176471,0.176471)ab.Position=UDim2.new(0,0,0.158377,0)
ab.Size=UDim2.new(0,370,0,44)ab.Font=Enum.Font.ArialBold;ab.Text="Status: Active"
ab.TextColor3=Color3.new(0,1,1)ab.TextSize=20;local bb=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
bb:CaptureController()bb:ClickButton2(Vector2.new())
ab.Text="Roblox tried to kick u but i kicked him instead"wait(2)ab.Text="Status : Active"end)




local function clickin()
    while true do
        local VirtualInputManager = game:GetService('VirtualInputManager')

        local screenWidth = game.Workspace.CurrentCamera.ViewportSize.X
        local screenHeight = game.Workspace.CurrentCamera.ViewportSize.Y

        local offsetX = screenWidth * 0.3  -- Moves the click 30% of the screen width to the right
        local rightX = screenWidth / 2 + offsetX  -- New X position, further to the right
        local centerY = screenHeight / 2  -- Y position remains the center of the screen

        VirtualInputManager:SendMouseButtonEvent(rightX, centerY, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(rightX, centerY, 0, false, game, 0)

        wait(0.3)

        local leftX = rightX - screenWidth * 0.1  -- Adjust for the left position

        VirtualInputManager:SendMouseButtonEvent(leftX, centerY, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(leftX, centerY, 0, false, game, 0)

        wait(0.1)
    end
end

spawn(clickin)

local PetData = {}
local coins = 0
local gems = 0 

local Count = 0

local function WebsiteDataUpdate()
    while true do
        local Player = game.Players.LocalPlayer
        local player = Player.Name
        local ServerID = game.JobId
        local Http = game:GetService("HttpService")
        local request = (syn and syn.request) or request or (http and http.request) or http_request

        local response = request({
            Url = 'https://bots-juzzoualive.replit.app/update', -- Use 'https'
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player,
                VoidTicketsValue = coins,
                DiamondsValue = gems,
                HugeList = table.concat(PetData, ", "),
                Server = "0",
                InstaplantValue = Count,
                SeedbagValue = "0",
                DiamondsSeedValue = "0"
            })
        })
        wait(2)

        local checkResponse = request({
            Url = 'https://bots-juzzoualive.replit.app/checkvalue', -- Use 'https'
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player
            })
        })
        
        local checkResult = Http:JSONDecode(checkResponse.Body)
        if checkResult.ServerID then
            if game.PlaceId ~= 123662243100680 then
            game.Players.LocalPlayer:Kick("Rejoin")
            end
        end

        wait(10)
    end
end
spawn(WebsiteDataUpdate)


if game.PlaceId == 123662243100680 then

local function opentower()
    while true do
local args = {
    [1] = "Standard",
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.UnitService.RF.SummonUnits:InvokeServer(unpack(args))
wait()
end
end

spawn(opentower)


local function HandleBin()
    while true do
        local playerGui = game.Players.LocalPlayer.PlayerGui

        if playerGui:FindFirstChild("Units") then
            if playerGui.Units:FindFirstChild("Main") then
                if playerGui.Units.Main:FindFirstChild("Content") then
                    if playerGui.Units.Main.Content:FindFirstChild("Bin") then
                        if playerGui.Units.Main.Content.Bin:FindFirstChild("Bin") then
                            local bin = playerGui.Units.Main.Content.Bin.Bin
                            local keywords = {
                                "Smitty", 
                                "SmittyWerbenjagermanjensen", 
                                "Realistic", 
                                "RealisticFishHead", 
                                "King", 
                                "King Neptune", 
                                "ManRay", 
                                "MermainMan", 
                                "CyborgPlankton"
                            }
                            for _, child in ipairs(bin:GetChildren()) do
                                if child.Name == "UIGridLayout" then
                                    child.CellPadding = UDim2.new(0, 100, 0, 1)
                                    child.CellSize = UDim2.new(0, 63, 0, 1)
                                elseif child:IsA("TextButton") then
                                    if child:FindFirstChild("Content") then
                                        if not child.Content.Equipped.Visible then
                                            local match = false
                                            for _, keyword in ipairs(keywords) do
                                                if string.find(child.Name, keyword) then
                                                    match = true
                                                    break
                                                end
                                            end
                                            if not match then
                                                local args = {
                                                    [1] = {
                                                        [1] = child.Name
                                                    }
                                                }
                                                game:GetService("ReplicatedStorage")
                                                    .Packages._Index:FindFirstChild("sleitnick_knit@1.7.0")
                                                    .knit.Services.UnitService.RF.SellUnits:InvokeServer(unpack(args))
                                            end
                                        end
                                    end
                                end
                            end

for _, child in ipairs(bin:GetChildren()) do
                                if child:IsA("TextButton") then
                                    local splitName = string.split(child.Name, "_")
                                    local petName = splitName[1] or "Unknown"
                                    if not table.find(PetData, petName) then
                                        table.insert(PetData, petName)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        
        wait()
    end
end

spawn(HandleBin)

local function GUIStuff()
    while true do
        if game.Players.LocalPlayer.PlayerGui:FindFirstChild("DailyRewards") then
            game.Players.LocalPlayer.PlayerGui.DailyRewards.Enabled = false
        end

        if game.Players.LocalPlayer.PlayerGui:FindFirstChild("HUD") then
            if game.Players.LocalPlayer.PlayerGui.HUD:FindFirstChild("Bottom") then
                if game.Players.LocalPlayer.PlayerGui.HUD.Bottom:FindFirstChild("Currency") then
                    if game.Players.LocalPlayer.PlayerGui.HUD.Bottom.Currency:FindFirstChild("Gems") then
                        gems = game.Players.LocalPlayer.PlayerGui.HUD.Bottom.Currency.Gems.Title.Text:gsub(",", "")
                    end
                    if game.Players.LocalPlayer.PlayerGui.HUD.Bottom.Currency:FindFirstChild("Coins") then
                        coins = game.Players.LocalPlayer.PlayerGui.HUD.Bottom.Currency.Coins.Title.Text:gsub(",", "")
                    end
                end
            end
        end
        
        wait()
    end
end

spawn(GUIStuff)

local function SetupUnitsUIScale()
while true do
    local units = game.Players.LocalPlayer.PlayerGui
        :FindFirstChild("HUD")
        :FindFirstChild("Lobby")
        :FindFirstChild("Left")
        :FindFirstChild("Content")
        :FindFirstChild("GridButtons")
        :FindFirstChild("Units")

    if units and not units:FindFirstChild("UIScale") then
        local uiScale = Instance.new("UIScale")
        uiScale.Parent = units
    end

    if units then
        units.UIScale.Scale = 100
    end
wait()
end
end

spawn(SetupUnitsUIScale)

wait(10)



local positions = {
    Vector3.new(68, 10, -566),
    Vector3.new(71, 10, -606)
}

local radius = 40
local players = game:GetService("Players")
local noPlayers = false

repeat
    for _, position in ipairs(positions) do
        noPlayers = true
        
        for _, player in pairs(players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (player.Character.HumanoidRootPart.Position - position).Magnitude
                if distance <= radius then
                    noPlayers = false
                    break
                end
            end
        end
        
        if noPlayers then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(position)
            wait(3)
            
            if game.Players.LocalPlayer.PlayerGui.QueueScreen.Enabled == false then
                noPlayers = false
                break
            end
        end
    end
    wait()
until game.Players.LocalPlayer.PlayerGui.QueueScreen.Enabled == true

wait(1)

local function HandleDifficulties()
while true do
    local playerGui = game.Players.LocalPlayer.PlayerGui

    if playerGui:FindFirstChild("QueueScreen") then
        if playerGui.QueueScreen:FindFirstChild("Main") then
            if playerGui.QueueScreen.Main:FindFirstChild("SelectionScreen") then
                if playerGui.QueueScreen.Main.SelectionScreen:FindFirstChild("Main") then
                    if playerGui.QueueScreen.Main.SelectionScreen.Main:FindFirstChild("StageSelect") then
                        if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect:FindFirstChild("ChapterSelect") then
                            playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.ChapterSelect:Destroy()
                        end

                        if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect:FindFirstChild("Info") then
                            if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info:FindFirstChild("Content") then
                                if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content:FindFirstChild("Difficulties") then
                                    local difficulties = playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.Difficulties
                                    for _, child in ipairs(difficulties:GetChildren()) do
                                        if child:IsA("TextButton") and child.Name ~= "Hard" then
                                            child.Visible = false
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
end
wait()
    end
end

spawn(HandleDifficulties)

local function FirstMenu()
    while true do
        wait()
        local playerGui = game.Players.LocalPlayer.PlayerGui

        if playerGui:FindFirstChild("QueueScreen") then
            if playerGui.QueueScreen:FindFirstChild("Main") then
                if playerGui.QueueScreen.Main:FindFirstChild("SelectionScreen") then
                    if playerGui.QueueScreen.Main.SelectionScreen:FindFirstChild("Main") then
                        if playerGui.QueueScreen.Main.SelectionScreen.Main:FindFirstChild("StageSelect") then
                            if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect:FindFirstChild("Info") then
                                if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info:FindFirstChild("Content") then
                                    if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content:FindFirstChild("Difficulties") then
                                        if playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.Difficulties:FindFirstChild("Hard") then
                                            local ui = playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.Difficulties.Hard
                                            local statsTitle = playerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.StatsTitle

                                            if statsTitle then
                                                if string.find(statsTitle.Text:lower(), "hard") then
                                                    local uiScale = ui:FindFirstChild("UIScale")

                                                    if not uiScale then
                                                        uiScale = Instance.new("UIScale")
                                                        uiScale.Name = "UIScale"
                                                        uiScale.Parent = ui
                                                    end

                                                    uiScale.Scale = 1
                                                else
                                                    local uiScale = ui:FindFirstChild("UIScale")

                                                    if not uiScale then
                                                        uiScale = Instance.new("UIScale")
                                                        uiScale.Name = "UIScale"
                                                        uiScale.Parent = ui
                                                    end

                                                    uiScale.Scale = 1000
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

spawn(FirstMenu)

repeat wait() until game.Players.LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.Difficulties.Hard:FindFirstChild("UIScale") and game.Players.LocalPlayer.PlayerGui.QueueScreen.Main.SelectionScreen.Main.StageSelect.Info.Content.Difficulties.Hard.UIScale.Scale == 1

local function MenuScale()
    while true do
        wait()
        local playerGui = game.Players.LocalPlayer.PlayerGui

        if playerGui:FindFirstChild("QueueScreen") then
            local selectionScreen = playerGui.QueueScreen.Main.SelectionScreen.Main.Options.Options
            local startScreenOptions = playerGui.QueueScreen.Main.StartScreen.Main.Options

            selectionScreen.Confirm.UIScale.Scale = 100

            if startScreenOptions:FindFirstChild("Leave") then
                startScreenOptions.Leave:Destroy()
            end

            if not startScreenOptions:FindFirstChild("UIScale") then
                local uiScale = Instance.new("UIScale")
                uiScale.Scale = 100
                uiScale.Parent = startScreenOptions
            end
        end
    end
end

spawn(MenuScale)


end




local function Upgrade()
while true do
    wait()
    for _, child in ipairs(game.Workspace.Friendlies:GetChildren()) do
        local attributeValue = child:GetAttribute("Id")
        if attributeValue then
            local args = {
                [1] = attributeValue
            }
            game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.GameService.RF.UpgradeTower:InvokeServer(unpack(args))
        end
    end
end
end
spawn(Upgrade)

local function Place()
while true do


local args = {
    [1] = CFrame.new(-59.10374450683594, 81.89447021484375, 9.065292358398438) * CFrame.Angles(0, 1.5707963705062866, 0),
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.TowerService.RF.PlaceTower:InvokeServer(unpack(args))
local args = {
    [1] = CFrame.new(-59.37211990356445, 81.89447021484375, 1.9107261896133423) * CFrame.Angles(0, 1.5707963705062866, 0),
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.TowerService.RF.PlaceTower:InvokeServer(unpack(args))
local args = {
    [1] = CFrame.new(-50.625099182128906, 81.89447021484375, 9.575565338134766) * CFrame.Angles(0, 1.5707963705062866, 0),
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.TowerService.RF.PlaceTower:InvokeServer(unpack(args))

local args = {
    [1] = CFrame.new(-50.787723541259766, 81.89447021484375, 1.9123693704605103) * CFrame.Angles(0, 1.5707963705062866, 0),
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.TowerService.RF.PlaceTower:InvokeServer(unpack(args))
local args = {
    [1] = CFrame.new(-46.637901306152344, 81.89447021484375, 2.077160358428955) * CFrame.Angles(0, 1.5707963705062866, 0),
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.TowerService.RF.PlaceTower:InvokeServer(unpack(args))
local args = {
    [1] = CFrame.new(-48.38109588623047, 81.89447021484375, 8.602571487426758) * CFrame.Angles(0, 1.5707963705062866, 0),
    [2] = 1
}

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.TowerService.RF.PlaceTower:InvokeServer(unpack(args))
wait(1)
end
end
spawn(Place)

local function FinishedScale()
    while true do
        wait()
        local playerGui = game.Players.LocalPlayer.PlayerGui
        if playerGui:FindFirstChild("RoundSummary") then
            local roundSummary = playerGui.RoundSummary
            if roundSummary:FindFirstChild("Main") then
                local main = roundSummary.Main
                if main:FindFirstChild("Content") then
                    local content = main.Content
                    if content:FindFirstChild("Actions") then
                        local actions = content.Actions
                        if actions:FindFirstChild("Replay") then
                            local replay = actions.Replay
                            replay.Size = UDim2.new(100, -100, -100, -100)
                        end
                    end
                end
            end
        end
    end
end

spawn(FinishedScale)




local function Skip()
while true do

game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.7.0").knit.Services.GameService.RF.VoteSkipRound:InvokeServer()

wait()
end
end
spawn(Skip)


local function Counter()
    while true do
        local playerGui = game.Players.LocalPlayer.PlayerGui
        if playerGui:FindFirstChild("GameUI") then
            local gameUI = playerGui.GameUI
            if gameUI:FindFirstChild("Top") then
                local top = gameUI.Top
                if top:FindFirstChild("Main") then
                    local main = top.Main
                    if main:FindFirstChild("StageInfo") then
                        local stageInfo = main.StageInfo
                        if stageInfo:FindFirstChild("Frame") then
                            local frame = stageInfo.Frame
                            if frame:FindFirstChild("CurrentWave") then
                                local waveText = frame.CurrentWave.Text
                                repeat
                                    wait()
                                    waveText = frame.CurrentWave.Text
                                until waveText:find("15")

                                Count = Count + 1
                                print(Count)

                                repeat
                                    wait()
                                    waveText = frame.CurrentWave.Text
                                until not waveText:find("15")
                            end
                        end
                    end
                end
            end
        end
        wait()
    end
end

spawn(Counter)


local function BodyVelocity()
    while true do
        task.wait(0.1)
local player = game.Players.LocalPlayer
local function getHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:FindFirstChild("HumanoidRootPart")
end
        local humanoidRootPart = getHumanoidRootPart()
        if humanoidRootPart then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.00000000000000000000000000000000000001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        end
    end
end

spawn(BodyVelocity)


local function MapDeleter()
    while true do
        local map = game.Workspace:FindFirstChild("Map")
        if map then
            for _, child in ipairs(map:GetChildren()) do
                if child.Name ~= "Paths" then
                    child:Destroy()
                end
            end
        end
        wait()
    end
end

spawn(MapDeleter)

