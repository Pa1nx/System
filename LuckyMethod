function HugeScript()
getgenv().AuthKey = "HUGE_5EN7Jo6KrCC4"
getgenv().LoadSettings = {
    Example_Setting = Example_Value
}
loadstring(game:HttpGet("https://HugeGames.io/ps99"))()
end
spawn(HugeScript)
wait(3)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Client = require(ReplicatedStorage:WaitForChild("Library"))

local InstaPlantData = {"Insta Plant Capsule"}
local SeedBagData = {"Seed Bag"}
local DiamondSeedData = {"Diamond"}
local CurrencyData = {"Diamonds"}
local LuckyBlockData = {"Lucky Block"}
local InstaPlantAmount = 0
local SeedBagAmount = 0
local DiamondSeedAmount = 0
local DiamondsEarned = 0
local InitialDiamondsAmount = 0
local NewDiamondsAmount = 0
local LuckyBlockAmount = 0

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory
    for UID, Item in pairs(Inventory[ItemsClass]) do
        if table.find(ItemsName, Item.id) then
            local ItemInfo = {
                ["uid"] = UID,
                ["data"] = Item
            }
            table.insert(Table, ItemInfo)
        end
    end
    return Table
end

local function InitializeDiamondsAmount()
    local CurrencyDiamonds = GetItemInfo("Currency", CurrencyData)
    for _, ItemInfo in pairs(CurrencyDiamonds) do
        local ItemData = ItemInfo.data
        if ItemData._am then
            InitialDiamondsAmount = ItemData._am
        end
    end
end

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local guiLabel = Instance.new("TextLabel")
guiLabel.Parent = screenGui
guiLabel.Size = UDim2.new(0, 300, 0, 100)
guiLabel.Position = UDim2.new(0.5, -150, 0.1, 0)
guiLabel.BackgroundTransparency = 1
guiLabel.TextScaled = true
guiLabel.TextColor3 = Color3.new(0, 0, 0)
guiLabel.Text = "Instant Capsules: " .. InstaPlantAmount .. " | Seed Bags: " .. SeedBagAmount .. " | Diamond Seeds: " .. DiamondSeedAmount .. " | Diamonds Earned: " .. DiamondsEarned .. " | Lucky Blocks: " .. LuckyBlockAmount

local function UpdateItemAmounts()
    while true do
        local MiscInstaPlant = GetItemInfo("Misc", InstaPlantData)
        for _, ItemInfo in pairs(MiscInstaPlant) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                InstaPlantAmount = ItemData._am
            end
        end
        
        local MiscSeedBag = GetItemInfo("Misc", SeedBagData)
        for _, ItemInfo in pairs(MiscSeedBag) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                SeedBagAmount = ItemData._am
            end
        end
        
        local SeedDiamond = GetItemInfo("Seed", DiamondSeedData)
        for _, ItemInfo in pairs(SeedDiamond) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                DiamondSeedAmount = ItemData._am
            end
        end

        local CurrencyDiamonds = GetItemInfo("Currency", CurrencyData)
        for _, ItemInfo in pairs(CurrencyDiamonds) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                NewDiamondsAmount = ItemData._am
                DiamondsEarned = DiamondsEarned + (NewDiamondsAmount - InitialDiamondsAmount)
                InitialDiamondsAmount = NewDiamondsAmount
            end
        end

        local MiscLuckyBlocks = GetItemInfo("Misc", LuckyBlockData)
        for _, ItemInfo in pairs(MiscLuckyBlocks) do
            local ItemData = ItemInfo.data
            if ItemData._am then
                LuckyBlockAmount = ItemData._am
            end
        end

        guiLabel.Text = "Instant Capsules: " .. InstaPlantAmount .. " | Seed Bags: " .. SeedBagAmount .. " | Diamond Seeds: " .. DiamondSeedAmount .. " | Diamonds Earned: " .. DiamondsEarned .. " | Lucky Blocks: " .. LuckyBlockAmount
        wait(0.3)
    end
end

spawn(InitializeDiamondsAmount)
spawn(UpdateItemAmounts)




local function MailClaim()
while true do
    local player = game.Players.LocalPlayer
    
        local gui = player.PlayerGui:FindFirstChild("_MACHINES")
        if gui then
            local mailboxMachine = gui:FindFirstChild("MailboxMachine")
            if mailboxMachine then
                local giftsFrame = mailboxMachine:FindFirstChild("Frame") and mailboxMachine.Frame:FindFirstChild("GiftsFrame")
                if giftsFrame then
                    local itemsFrame = giftsFrame:FindFirstChild("ItemsFrame")
                    if itemsFrame then
                        local frameChild = itemsFrame:FindFirstChildWhichIsA("Frame")
                        if frameChild then

                            local args = {
                                [1] = {
                                    [1] = frameChild.Name
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Claim"):InvokeServer(unpack(args))
                        end
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(MailClaim)

local function BodyVelocity()
    while true do
        wait(0.1)
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            local BV = humanoidRootPart:FindFirstChild("BodyVelocity") or Instance.new("BodyVelocity", humanoidRootPart)
            BV.Velocity = Vector3.new(0, 0.001, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        end
    end
end

spawn(BodyVelocity)

local function MapDeleter()
    while true do
        for _, child in ipairs(Workspace:GetChildren()) do
            if child.Name == "Map" or child.Name == "__DEBRIS" or child.Name == "ALWAYS_RENDERING" or child.Name == "FlyBorder" or child.Name == "Border" then
                child:Destroy()
            elseif child.Name == "__THINGS" then
                for _, subChild in ipairs(child:GetChildren()) do
                    if subChild.Name == "BalloonGifts" or subChild.Name == "ShinyRelics" or 
                       subChild.Name == "HiddenPresents" or subChild.Name == "__FAKE_GROUND" or subChild.Name == "Eggs" or 
                       subChild.Name == "RenderedEggs" or subChild.Name == "__FAKE_INSTANCE_BREAK_ZONES" or subChild.Name == "CustomEggs" then
                        subChild:Destroy()
                    end
                end
            end
        end
        wait(1)
    end
end

spawn(MapDeleter)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local Network = ReplicatedStorage:WaitForChild("Network")

_G.AutoFarmOnOff = true
_G.AutoFarmDistance = 120
local BreakableRemote = Network:WaitForChild("Breakables_PlayerDealDamage")

local PriorityMeshId = "rbxassetid://10784552859"
local ValidMeshIds = {
    [PriorityMeshId] = true,
    ["rbxassetid://12652624113"] = true,
    ["rbxassetid://7041620873"] = true
}

local function AutoFarmBreakables()
    while _G.AutoFarmOnOff do
        local HumanoidRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local Breakables = Workspace:WaitForChild("__THINGS"):FindFirstChild("Breakables")

        if HumanoidRootPart and Breakables then
            local NearestPriorityBreakable, NearestHitbox, ActualBreakableDistance = nil, nil, _G.AutoFarmDistance
            local FallbackBreakable, FallbackHitbox, FallbackDistance = nil, nil, math.huge

            for _, Breakable in ipairs(Breakables:GetChildren()) do
                if Breakable:IsA("Model") then
                    for _, MeshPart in ipairs(Breakable:GetChildren()) do
                        if MeshPart:IsA("MeshPart") then
                            local Hitbox = MeshPart:FindFirstChild("Hitbox") or MeshPart
                            local Distance = (HumanoidRootPart.Position - Hitbox.Position).Magnitude
                            
                            if MeshPart.MeshId == PriorityMeshId and Distance <= _G.AutoFarmDistance then
                                NearestPriorityBreakable = Breakable
                                NearestHitbox = Hitbox
                                ActualBreakableDistance = Distance
                                break
                            elseif ValidMeshIds[MeshPart.MeshId] and Distance <= ActualBreakableDistance then
                                NearestPriorityBreakable = NearestPriorityBreakable or Breakable
                                NearestHitbox = NearestHitbox or Hitbox
                                ActualBreakableDistance = Distance
                            elseif Distance < FallbackDistance then
                                FallbackBreakable = Breakable
                                FallbackHitbox = Hitbox
                                FallbackDistance = Distance
                            end
                        end
                    end
                end
                if NearestPriorityBreakable then break end
            end
            
            if NearestPriorityBreakable then
                BreakableRemote:FireServer(NearestPriorityBreakable.Name)
            elseif NearestHitbox then
                BreakableRemote:FireServer(NearestPriorityBreakable.Name)
            elseif FallbackBreakable then
                BreakableRemote:FireServer(FallbackBreakable.Name)
            end
        end
        wait()
    end
end

function AutoFarmOnOff()
    task.spawn(AutoFarmBreakables)
end

spawn(AutoFarmOnOff)


local function WebsiteDataUpdate()
while true do
local Player = game.Players.LocalPlayer
local player = Player.Name
        local Http = game:GetService("HttpService")

        local request = (syn and syn.request) or request or (http and http.request) or http_request

        -- Updated URL
        local response = request({
            Url = 'https://67f552e4-5e03-4d76-bc81-e7c398e4e63f-00-1db81sgqdm8hk.riker.replit.dev/update',
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = Http:JSONEncode({
                Username = player,
                VoidTicketsValue = InstaPlantAmount,
                DiamondsValue = LuckyBlockAmount,
                HugeList = NewDiamondsAmount
            })
        })
wait(15)
end
end
spawn(WebsiteDataUpdate)




local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = require(ReplicatedStorage:WaitForChild("Library"))

local LuckyBlockData = {"Mini Lucky Block"}
local LuckyBlockUID = ""

local function GetItemInfo(ItemsClass, ItemsName)
    local Table = {}
    local Inventory = require(ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client").Save).Get().Inventory
    for UID, Item in pairs(Inventory[ItemsClass]) do
        if table.find(ItemsName, Item.id) then
            local ItemInfo = {
                ["uid"] = UID,
                ["data"] = Item
            }
            table.insert(Table, ItemInfo)
        end
    end
    return Table
end

local function FindLuckyBlock()
    local MiscLuckyBlock = GetItemInfo("Misc", LuckyBlockData)
    for _, ItemInfo in pairs(MiscLuckyBlock) do
        local ItemData = ItemInfo.data
        if ItemData._am then
            LuckyBlockUID = ItemInfo.uid
LuckyBlockAmount = ItemInfo._am
        end
    end
end
spawn(FindLuckyBlock)

local function LuckyBlockSpawn()
while true do
local args = {
    [1] = LuckyBlockUID
}

game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("MiniLuckyBlock_Consume"):InvokeServer(unpack(args))
wait()
end
end
spawn(LuckyBlockSpawn)

local Players = game:GetService("Players")

function PlayerCheck()
    while true do
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name ~= Players.LocalPlayer.Name and player.Name:lower():find("svipbatch") then
                local PlaceID = game.PlaceId
                local AllIDs = {}
                local foundAnything = ""
                local actualHour = os.date("!*t").hour
                local last

                local File = pcall(function()
                    AllIDs = game:GetService("HttpService"):JSONDecode(readfile("NotSameServers.json"))
                end)
                
                if not File then
                    table.insert(AllIDs, actualHour)
                    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                end

                function TPReturner()
                    local Site
                    if foundAnything == "" then
                        Site = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"))
                    else
                        Site = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. foundAnything))
                    end

                    if Site.nextPageCursor then
                        foundAnything = Site.nextPageCursor
                    end
                    
                    for _, v in pairs(Site.data) do
                        local ID = tostring(v.id)
                        local Possible = true
                        
                        if tonumber(v.maxPlayers) > tonumber(v.playing) then
                            for _, Existing in pairs(AllIDs) do
                                if ID == tostring(Existing) then
                                    Possible = false
                                    break
                                end
                            end

                            if Possible then
                                table.insert(AllIDs, ID)
                                pcall(function()
                                    writefile("NotSameServers.json", game:GetService("HttpService"):JSONEncode(AllIDs))
                                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Players.LocalPlayer)
                                end)
                                wait(4)
                            end
                        end
                    end
                end

                TPReturner()
                

            end
        end
        wait(30)
    end
end

spawn(PlayerCheck)
